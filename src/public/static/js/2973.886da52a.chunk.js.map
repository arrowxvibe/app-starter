{"version":3,"file":"static/js/2973.886da52a.chunk.js","mappings":"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","sources":["pages/apps/Ecommerce/Orders.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Row, Col, Card, Button } from \"react-bootstrap\";\nimport classNames from \"classnames\";\n\n// components\nimport PageTitle from \"../../../components/PageTitle\";\nimport Table from \"../../../components/Table\";\n\n// dummy data\nimport { orders, OrdersItemTypes } from \"./data\";\n\n/* order column render */\nconst OrderColumn = ({ row }: { row: any }) => {\n  return (\n    <>\n      <Link to=\"/apps/ecommerce/order/details\" className=\"text-body fw-bold\">\n        #BM{row.original.order_id}\n      </Link>\n    </>\n  );\n};\n\n/* product column render */\nconst ProductsColumn = ({ row }: { row: any }) => {\n  return (\n    <>\n      {(row.original.product_img || []).map((img: string, index: number) => {\n        return (\n          <Link to=\"/apps/ecommerce/product-details\" key={index}>\n            <img src={img} alt=\"\" height=\"32\" />\n          </Link>\n        );\n      })}\n    </>\n  );\n};\n\n/* orderdate column render */\nconst OrderDateColumn = ({ row }: { row: any }) => {\n  return (\n    <>\n      {row.original.order_date}{\" \"}\n      <small className=\"text-muted\">{row.original.order_time}</small>\n    </>\n  );\n};\n\n/* payment column render */\nconst PaymentStatusColumn = ({ row }: { row: any }) => {\n  return (\n    <>\n      <h5>\n        <span\n          className={classNames(\"badge\", {\n            \"bg-soft-success text-success\":\n              row.original.payment_status === \"Paid\",\n            \"bg-soft-danger text-danger\":\n              row.original.payment_status === \"Payment Failed\",\n            \"bg-soft-info text-info\": row.original.payment_status === \"Unpaid\",\n            \"bg-soft-warning text-warning\":\n              row.original.payment_status === \"Awaiting Authorization\",\n          })}\n        >\n          {row.original.payment_status === \"Paid\" && (\n            <i className=\"mdi mdi-bitcoin me-1\"></i>\n          )}\n          {row.original.payment_status === \"Payment Failed\" && (\n            <i className=\"mdi mdi-cancel me-1\"></i>\n          )}\n          {row.original.payment_status === \"Unpaid\" && (\n            <i className=\"mdi mdi-cash me-1\"></i>\n          )}\n          {row.original.payment_status === \"Awaiting Authorization\" && (\n            <i className=\"mdi mdi-timer-sand me-1\"></i>\n          )}\n          {row.original.payment_status}\n        </span>\n      </h5>\n    </>\n  );\n};\n\n/* status column render */\nconst StatusColumn = ({ row }: { row: any }) => {\n  return (\n    <>\n      <h5>\n        <span\n          className={classNames(\"badge\", {\n            \"bg-success\": row.original.order_status === \"Delivered\",\n            \"bg-danger\": row.original.order_status === \"Cancelled\",\n            \"bg-info\": row.original.order_status === \"Shipped\",\n            \"bg-warning\": row.original.order_status === \"Processing\",\n          })}\n        >\n          {row.original.order_status}\n        </span>\n      </h5>\n    </>\n  );\n};\n\n/* action column render */\nconst ActionColumn = () => {\n  return (\n    <>\n      <Link to=\"#\" className=\"action-icon\">\n        {\" \"}\n        <i className=\"mdi mdi-eye\"></i>\n      </Link>\n      <Link to=\"#\" className=\"action-icon\">\n        {\" \"}\n        <i className=\"mdi mdi-square-edit-outline\"></i>\n      </Link>\n      <Link to=\"#\" className=\"action-icon\">\n        {\" \"}\n        <i className=\"mdi mdi-delete\"></i>\n      </Link>\n    </>\n  );\n};\n\n// get all columns\nconst columns = [\n  {\n    Header: \"Order ID\",\n    accessor: \"order_id\",\n    Cell: OrderColumn,\n  },\n  {\n    Header: \"Products\",\n    accessor: \"product_img\",\n    Cell: ProductsColumn,\n  },\n  {\n    Header: \"Date\",\n    accessor: \"order_date\",\n    Cell: OrderDateColumn,\n  },\n  {\n    Header: \"Payment Status\",\n    accessor: \"payment_status\",\n    Cell: PaymentStatusColumn,\n  },\n  {\n    Header: \"Total\",\n    accessor: \"total\",\n  },\n  {\n    Header: \"Payment Method\",\n    accessor: \"payment_method\",\n  },\n  {\n    Header: \"Order Status\",\n    accessor: \"order_status\",\n    Cell: StatusColumn,\n  },\n  {\n    Header: \"Action\",\n    accessor: \"action\",\n    Cell: ActionColumn,\n  },\n];\n\n// get pagelist to display\nconst sizePerPageList = [\n  {\n    text: \"10\",\n    value: 10,\n  },\n  {\n    text: \"20\",\n    value: 20,\n  },\n  {\n    text: \"50\",\n    value: 50,\n  },\n];\n\n// main component\nconst Orders = () => {\n  const [orderList, setOrderList] = useState<OrdersItemTypes[]>(orders);\n\n  // change order status group\n  const changeOrderStatusGroup = (OrderStatusGroup: string) => {\n    let updatedData = [...orders];\n    //  filter\n    updatedData =\n      OrderStatusGroup === \"All\"\n        ? orders\n        : [...orders].filter((o) =>\n            o.payment_status?.includes(OrderStatusGroup)\n          );\n    setOrderList(updatedData);\n  };\n\n  return (\n    <>\n      <PageTitle\n        breadCrumbItems={[\n          { label: \"Ecommerce\", path: \"/apps/ecommerce/orders\" },\n          { label: \"Orders\", path: \"/apps/ecommerce/orders\", active: true },\n        ]}\n        title={\"Orders\"}\n      />\n\n      <Row>\n        <Col>\n          <Card>\n            <Card.Body>\n              <Row className=\"align-items-center\">\n                <Col lg={8}>\n                  <form className=\"row gy-2 gx-2 align-items-center justify-content-lg-start justify-content-between\">\n                    <div className=\"col-auto\">\n                      <div className=\"d-flex align-items-center w-auto\">\n                        <label htmlFor=\"status-select\" className=\"me-2\">\n                          Status\n                        </label>\n                        <select\n                          className=\"form-select\"\n                          id=\"status-select\"\n                          onChange={(e: any) =>\n                            changeOrderStatusGroup(e.target.value)\n                          }\n                        >\n                          <option value=\"All\">All</option>\n                          <option value=\"Paid\">Paid</option>\n                          <option value=\"Authorization\">\n                            Awaiting Authorization\n                          </option>\n                          <option value=\"Failed\">Payment failed</option>\n                          <option value=\"Unpaid\">Unpaid</option>\n                        </select>\n                      </div>\n                    </div>\n                  </form>\n                </Col>\n\n                <Col lg={4}>\n                  <div className=\"text-lg-end mt-xl-0 mt-2\">\n                    <Button className=\"btn btn-danger mb-2 me-2\">\n                      <i className=\"mdi mdi-basket me-1\"></i> Add New Order\n                    </Button>\n                    <Button className=\"btn btn-light mb-2\">Export</Button>\n                  </div>\n                </Col>\n              </Row>\n\n              <Table\n                columns={columns}\n                data={orderList}\n                isSearchable={true}\n                pageSize={10}\n                sizePerPageList={sizePerPageList}\n                isSortable={true}\n                pagination={true}\n                isSelectable={true}\n                theadClass=\"table-light\"\n                searchBoxClass=\"mb-2\"\n              />\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default Orders;\n"],"names":["columns","Header","accessor","Cell","_ref","row","_jsx","_Fragment","children","_jsxs","Link","to","className","original","order_id","_ref2","product_img","map","img","index","src","alt","height","_ref3","order_date","order_time","_ref4","classNames","payment_status","_ref5","order_status","sizePerPageList","text","value","_useState","useState","orders","_useState2","_slicedToArray","orderList","setOrderList","PageTitle","breadCrumbItems","label","path","active","title","Row","Col","Card","lg","htmlFor","id","onChange","e","OrderStatusGroup","updatedData","_toConsumableArray","filter","o","_o$payment_status","includes","changeOrderStatusGroup","target","Button","Table","data","isSearchable","pageSize","isSortable","pagination","isSelectable","theadClass","searchBoxClass"],"sourceRoot":""}