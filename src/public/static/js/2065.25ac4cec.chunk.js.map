{"version":3,"file":"static/js/2065.25ac4cec.chunk.js","mappings":"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","sources":["pages/uikit/Notifications.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Row,\n  Col,\n  Card,\n  Toast,\n  ToastContainer,\n  Form,\n  Button,\n  Alert,\n} from \"react-bootstrap\";\nimport classNames from \"classnames\";\n\n// components\nimport PageTitle from \"../../components/PageTitle\";\n\nimport logo from \"../../assets/images/logo-sm.png\";\n\nconst colors: string[] = [\n  \"primary\",\n  \"secondary\",\n  \"success\",\n  \"danger\",\n  \"warning\",\n  \"info\",\n  \"light\",\n  \"dark\",\n];\n\nconst DefaultToasts = () => {\n  const [show, setShow] = useState<boolean>(true);\n  const [showTranslucent, setShowTranslucent] = useState<boolean>(true);\n  const [showPlacement, setShowPlacement] = useState<boolean>(true);\n\n  const [stacked, setStacked] = useState([\n    {\n      time: \"just now\",\n      desc: \"See? Just like this.\",\n    },\n    {\n      time: \"2 seconds ago\",\n      desc: \"Heads up, toasts will stack automatically\",\n    },\n  ]);\n\n  /*\n   * handle close\n   */\n  const handleClose = (index: number) => {\n    const list = [...stacked];\n    list.splice(index, 1);\n    setStacked(list);\n  };\n\n  return (\n    <Card>\n      <Card.Body>\n        <h4 className=\"header-title\">Bootstrap Toasts</h4>\n        <p className=\"text-muted font-14\">\n          Push notifications to your visitors with a toast, a lightweight and\n          easily customizable alert message.\n        </p>\n\n        <Row>\n          <Col lg={6}>\n            <h5 className=\"mb-2\">Basic</h5>\n            <p className=\"text-muted font-14\">\n              Toasts are as flexible as you need and have very little required\n              markup. At a minimum, we require a single element to contain your\n              “toasted” content and strongly encourage a dismiss button.\n            </p>\n            <div className=\"p-3\">\n              <Toast\n                onClose={() => setShow(false)}\n                show={show}\n                delay={3000}\n                autohide\n              >\n                <Toast.Header>\n                  <img\n                    src={logo}\n                    alt=\"brand-logo\"\n                    height=\"12\"\n                    className=\"me-1\"\n                  />\n                  <strong className=\"me-auto\">Arita</strong>\n                  <small className=\"ms-5\">11 mins ago</small>\n                </Toast.Header>\n                <Toast.Body>Hello, world! This is a toast message.</Toast.Body>\n              </Toast>\n            </div>\n          </Col>\n\n          <Col lg={6}>\n            <h5 className=\"mb-2\">Translucent</h5>\n            <p className=\"text-muted font-14\">\n              Toasts are slightly translucent, too, so they blend over whatever\n              they might appear over. For browsers that support the\n              backdrop-filter CSS property, we’ll also attempt to blur the\n              elements under a toast.\n            </p>\n\n            <div className=\"p-3 bg-light\">\n              <Toast\n                onClose={() => setShowTranslucent(false)}\n                show={showTranslucent}\n                delay={4000}\n                autohide\n              >\n                <Toast.Header>\n                  <img\n                    src={logo}\n                    alt=\"brand-logo\"\n                    height=\"12\"\n                    className=\"me-1\"\n                  />\n                  <strong className=\"me-auto\">Arita</strong>\n                  <small className=\"ms-5\">11 mins ago</small>\n                </Toast.Header>\n                <Toast.Body>Hello, world! This is a toast message.</Toast.Body>\n              </Toast>\n            </div>\n          </Col>\n        </Row>\n\n        {/* stacked */}\n        <Row>\n          <Col lg={6} className=\"mt-4\">\n            <h5 className=\"mb-2\">Stacking</h5>\n            <p className=\"text-muted font-14\">\n              When you have multiple toasts, we default to vertiaclly stacking\n              them in a readable manner.\n            </p>\n            <div className=\"p-3\">\n              <div\n                aria-live=\"polite\"\n                aria-atomic=\"true\"\n                style={{ position: \"relative\", minHeight: \"200px\" }}\n              >\n                <div\n                  className=\"toast-container\"\n                  style={{ position: \"absolute\", top: 0, right: 0 }}\n                >\n                  {(stacked || []).map((item, index) => {\n                    return (\n                      <Toast\n                        key={index}\n                        onClose={() => handleClose(index)}\n                        delay={5000}\n                        autohide\n                      >\n                        <Toast.Header>\n                          <img\n                            src={logo}\n                            alt=\"brand-logo\"\n                            height=\"12\"\n                            className=\"me-1\"\n                          />\n                          <strong className=\"me-auto\">Arita</strong>\n                          <small className=\"ms-5\">{item.time}</small>\n                        </Toast.Header>\n                        <Toast.Body>{item.desc}</Toast.Body>\n                      </Toast>\n                    );\n                  })}\n                </div>\n              </div>\n            </div>\n          </Col>\n\n          <Col lg={6} className=\"mt-4\">\n            <h5 className=\"mb-2\">Placement</h5>\n            <p className=\"text-muted font-14\">\n              Place toasts with custom CSS as you need them. The top right is\n              often used for notifications, as is the top middle. If you’re only\n              ever going to show one toast at a time, put the positioning styles\n              right on the <code>.toast</code>.\n            </p>\n\n            <div className=\"p-3\">\n              <div\n                aria-live=\"polite\"\n                aria-atomic=\"true\"\n                className=\"d-flex justify-content-center align-items-center\"\n                style={{ minHeight: \"200px\" }}\n              >\n                <Toast\n                  onClose={() => setShowPlacement(false)}\n                  show={showPlacement}\n                >\n                  <Toast.Header>\n                    <img\n                      src={logo}\n                      alt=\"brand-logo\"\n                      height=\"12\"\n                      className=\"me-1\"\n                    />\n                    <strong className=\"me-auto\">Arita</strong>\n                    <small className=\"ms-5\">1 mins ago</small>\n                  </Toast.Header>\n                  <Toast.Body>\n                    Heads up, toasts will stack automatically\n                  </Toast.Body>\n                </Toast>\n              </div>\n            </div>\n          </Col>\n        </Row>\n      </Card.Body>\n    </Card>\n  );\n};\n\nconst CustomToast = () => {\n  const [showCustom1, setShowCustom1] = useState<boolean>(true);\n  const [showCustom2, setShowCustom2] = useState<boolean>(true);\n  const [showCustom3, setShowCustom3] = useState<boolean>(true);\n  const [showCustom4, setShowCustom4] = useState<boolean>(true);\n\n  return (\n    <>\n      <Card>\n        <Card.Body>\n          <h4 className=\"header-title\">Custom content</h4>\n          <p className=\"text-muted\">\n            Alternatively, you can also add additional controls and components\n            to toasts.\n          </p>\n          <Toast\n            className=\"d-flex align-items-center mt-4\"\n            show={showCustom1}\n            onClose={() => setShowCustom1(false)}\n            delay={3000}\n            autohide\n          >\n            <Toast.Body>Hello, world! This is a toast message.</Toast.Body>\n            <Button\n              variant=\"\"\n              onClick={() => setShowCustom1(false)}\n              className=\"btn-close ms-auto me-2\"\n            ></Button>\n          </Toast>\n          <Toast\n            className=\"d-flex align-items-center text-white bg-primary border-0 mt-4\"\n            show={showCustom2}\n            onClose={() => setShowCustom2(false)}\n            delay={4000}\n            autohide\n          >\n            <Toast.Body>Hello, world! This is a toast message.</Toast.Body>\n\n            <Button\n              variant=\"\"\n              onClick={() => setShowCustom2(false)}\n              className=\"btn-close btn-close-white ms-auto me-2\"\n            ></Button>\n          </Toast>\n          <Toast\n            className=\"mt-4\"\n            show={showCustom3}\n            onClose={() => setShowCustom3(false)}\n            delay={6000}\n            autohide\n          >\n            <Toast.Body>\n              Hello, world! This is a toast message.\n              <div className=\"mt-2 pt-2 border-top\">\n                <Button variant=\"primary\" className=\"btn-sm me-1\">\n                  Take action\n                </Button>\n                <Button\n                  variant=\"secondary\"\n                  onClick={() => setShowCustom3(false)}\n                  className=\"btn-sm\"\n                >\n                  Close\n                </Button>\n              </div>\n            </Toast.Body>\n          </Toast>\n          <Toast\n            className=\"text-white bg-primary mt-4\"\n            show={showCustom4}\n            onClose={() => setShowCustom4(false)}\n            delay={8000}\n            autohide\n          >\n            <Toast.Body>\n              Hello, world! This is a toast message.\n              <div className=\"mt-2 pt-2 border-top\">\n                <Button variant=\"light\" className=\"btn-sm me-1\">\n                  Take action\n                </Button>\n                <Button\n                  variant=\"secondary\"\n                  onClick={() => setShowCustom4(false)}\n                  className=\"btn-sm\"\n                >\n                  Close\n                </Button>\n              </div>\n            </Toast.Body>\n          </Toast>\n        </Card.Body>\n      </Card>\n    </>\n  );\n};\n\nconst PlacementToast = () => {\n  type ToastPositions =\n    | \"top-start\"\n    | \"top-center\"\n    | \"top-end\"\n    | \"middle-start\"\n    | \"middle-center\"\n    | \"middle-end\"\n    | \"bottom-start\"\n    | \"bottom-center\"\n    | \"bottom-end\";\n\n  const [position, setPosition] = useState<ToastPositions>(\"top-start\");\n\n  const positions = [\n    \"top-start\",\n    \"top-center\",\n    \"top-end\",\n    \"middle-start\",\n    \"middle-center\",\n    \"middle-end\",\n    \"bottom-start\",\n    \"bottom-center\",\n    \"bottom-end\",\n  ];\n\n  return (\n    <>\n      <Card>\n        <Card.Body>\n          <h4 className=\"header-title\">Placement</h4>\n          <p className=\"text-muted font-14\">\n            Place toasts with custom CSS as you need them. The top right is\n            often used for notifications, as is the top middle. If you’re only\n            ever going to show one toast at a time, put the positioning styles\n            right on the\n            <code>.toast</code>.\n          </p>\n          <div className=\"mb-3\">\n            <label htmlFor=\"selectToastPlacement\">Toast placement</label>\n            <Form.Select\n              id=\"selectToastPlacement\"\n              className=\"mt-2\"\n              onChange={(e: any) => setPosition(e.currentTarget.value)}\n            >\n              {(positions || []).map((p) => (\n                <option key={p} value={p}>\n                  {p}\n                </option>\n              ))}\n            </Form.Select>\n          </div>\n\n          <div\n            aria-live=\"polite\"\n            aria-atomic=\"true\"\n            className=\"bg-light position-relative\"\n            style={{ minHeight: \"294px\" }}\n          >\n            <ToastContainer className=\"p-3\" position={position}>\n              <Toast>\n                <Toast.Header closeButton={false}>\n                  <img src={logo} className=\"me-1\" alt=\"\" height=\"12\" />\n                  <strong className=\"me-auto\">Arita</strong>\n                  <small>11 mins ago</small>\n                </Toast.Header>\n                <Toast.Body>Hello, world! This is a toast message.</Toast.Body>\n              </Toast>\n            </ToastContainer>\n          </div>\n        </Card.Body>\n      </Card>\n    </>\n  );\n};\n\nconst DefaultAlerts = () => {\n  return (\n    <Card>\n      <Card.Body>\n        <h4 className=\"header-title\">Default Alert</h4>\n        <p className=\"sub-header\">\n          Alerts are available for any length of text, as well as an optional\n          dismiss button. For proper styling, use one of the eight{\" \"}\n          <code>variant</code>s.\n        </p>\n\n        {(colors || []).map((color, index) => {\n          return (\n            <Alert variant={color} key={index}>\n              This is a <strong>{color}</strong> alert—check it out!\n            </Alert>\n          );\n        })}\n      </Card.Body>\n    </Card>\n  );\n};\n\nconst DismissibleAlerts = () => {\n  const [colors, setColors] = useState<string[]>([\n    \"primary\",\n    \"secondary\",\n    \"success\",\n    \"danger\",\n    \"warning\",\n    \"info\",\n    \"light\",\n    \"dark\",\n  ]);\n\n  /*\n   * handle close\n   */\n  const handleClose = (index: number) => {\n    const list = [...colors];\n    list.splice(index, 1);\n    setColors(list);\n  };\n\n  return (\n    <Card>\n      <Card.Body>\n        <h4 className=\"header-title\">Dismissing Alerts</h4>\n        <p className=\"sub-header\">\n          Add the <code>dismissible</code> prop to add a functioning dismiss\n          button to the Alert.\n        </p>\n\n        {colors.map((color, index) => {\n          return (\n            <Alert\n              variant={color}\n              key={index}\n              onClose={() => handleClose(index)}\n              dismissible\n            >\n              <strong>{color} - </strong> A simple {color} alert—check it out!\n            </Alert>\n          );\n        })}\n      </Card.Body>\n    </Card>\n  );\n};\n\nconst CustomBackgroundAlerts = () => {\n  return (\n    <>\n      <Card>\n        <Card.Body>\n          <h4 className=\"header-title\">Custom Background Alert</h4>\n          <p className=\"sub-header\">\n            Use <code>.bg-*</code>,<code>.border-0</code> classes.\n          </p>\n\n          {(colors || []).map((color, index) => {\n            return (\n              <Alert\n                variant={color}\n                key={index}\n                className={classNames(\n                  \"bg-\" + color,\n                  \"border-0\",\n                  color === \"light\" ? \"text-dark\" : \"text-white\",\n                  color === \"dark\" ? \"text-light\" : \"text-white\"\n                )}\n              >\n                This is a <strong>{color}</strong> alert—check it out!\n              </Alert>\n            );\n          })}\n        </Card.Body>\n      </Card>\n    </>\n  );\n};\n\nconst DismissibleCustomBackgroundAlerts = () => {\n  const [colors, setColors] = useState<string[]>([\n    \"primary\",\n    \"secondary\",\n    \"success\",\n    \"danger\",\n    \"warning\",\n    \"info\",\n    \"light\",\n    \"dark\",\n  ]);\n\n  /*\n   * handle close\n   */\n  const handleClose = (index: number) => {\n    const list = [...colors];\n    list.splice(index, 1);\n    setColors(list);\n  };\n\n  return (\n    <Card>\n      <Card.Body>\n        <h4 className=\"header-title\">Dismissing Custom Background Alert</h4>\n        <p className=\"sub-header\">\n          Use <code>.bg-*</code>,<code>.border-0</code> classes.\n        </p>\n\n        {(colors || []).map((color, index) => {\n          return (\n            <Alert\n              variant={color}\n              key={index}\n              onClose={() => handleClose(index)}\n              className={classNames(\n                \"bg-\" + color,\n                \"border-0\",\n                color === \"light\" ? \"text-dark\" : \"text-white\",\n                color === \"dark\" ? \"text-light\" : \"text-white\"\n              )}\n              dismissible\n            >\n              <strong>{color} - </strong> A simple {color} alert—check it out!\n            </Alert>\n          );\n        })}\n      </Card.Body>\n    </Card>\n  );\n};\n\nconst Notifications = () => {\n  return (\n    <React.Fragment>\n      <PageTitle\n        breadCrumbItems={[\n          { label: \"Base UI\", path: \"/ui/toasts\" },\n          {\n            label: \"Alerts & Notifications\",\n            path: \"/ui/notifications\",\n            active: true,\n          },\n        ]}\n        title={\"Alerts & Notifications\"}\n      />\n\n      {/* toasts */}\n      <Row>\n        <Col>\n          <DefaultToasts />\n        </Col>\n      </Row>\n\n      <Row>\n        <Col lg={6}>\n          <CustomToast />\n        </Col>\n        <Col lg={6}>\n          <PlacementToast />\n        </Col>\n      </Row>\n\n      {/* alerts */}\n      <Row>\n        <Col lg={6}>\n          <DefaultAlerts />\n        </Col>\n\n        <Col lg={6}>\n          <DismissibleAlerts />\n        </Col>\n      </Row>\n\n      <Row>\n        <Col lg={6}>\n          <CustomBackgroundAlerts />\n        </Col>\n\n        <Col lg={6}>\n          <DismissibleCustomBackgroundAlerts />\n        </Col>\n      </Row>\n    </React.Fragment>\n  );\n};\n\nexport default Notifications;\n"],"names":["colors","DefaultToasts","_useState","useState","_useState2","_slicedToArray","show","setShow","_useState3","_useState4","showTranslucent","setShowTranslucent","_useState5","_useState6","showPlacement","setShowPlacement","_useState7","time","desc","_useState8","stacked","setStacked","_jsx","Card","children","_jsxs","className","Row","Col","lg","Toast","onClose","delay","autohide","src","logo","alt","height","style","position","minHeight","top","right","map","item","index","list","_toConsumableArray","splice","handleClose","CustomToast","_useState9","_useState10","showCustom1","setShowCustom1","_useState11","_useState12","showCustom2","setShowCustom2","_useState13","_useState14","showCustom3","setShowCustom3","_useState15","_useState16","showCustom4","setShowCustom4","_Fragment","Button","variant","onClick","PlacementToast","_useState17","_useState18","setPosition","htmlFor","Form","id","onChange","e","currentTarget","value","p","ToastContainer","closeButton","DefaultAlerts","color","Alert","DismissibleAlerts","_useState19","_useState20","setColors","dismissible","CustomBackgroundAlerts","classNames","DismissibleCustomBackgroundAlerts","_useState21","_useState22","React","PageTitle","breadCrumbItems","label","path","active","title"],"sourceRoot":""}