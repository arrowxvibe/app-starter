{"version":3,"file":"static/js/5272.bd779433.chunk.js","mappings":"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","sources":["pages/uikit/Dropdowns.tsx","../node_modules/react-bootstrap/esm/ButtonGroup.js"],"sourcesContent":["import React from \"react\";\nimport { Row, Col, Card, Dropdown, ButtonGroup, Button } from \"react-bootstrap\";\n\n// components\nimport PageTitle from \"../../components/PageTitle\";\n\nconst colors = [\n  {\n    name: \"Primary\",\n    color: \"primary\",\n  },\n  {\n    name: \"Secondary\",\n    color: \"secondary\",\n  },\n  {\n    name: \"Success\",\n    color: \"success\",\n  },\n  {\n    name: \"Info\",\n    color: \"info\",\n  },\n  {\n    name: \"Warning\",\n    color: \"warning\",\n  },\n  {\n    name: \"Danger\",\n    color: \"danger\",\n  },\n];\n\nconst SingleButtonDropdown = () => {\n  return (\n    <>\n      <p className=\"h5\">Single button dropdowns</p>\n      <p className=\"text-muted font-13 mb-3\">\n        You can use <code>DropdownButton</code> to create a simple dropdown.\n        Also, you can use prop <code>as</code> to create custom element typeof\n        dropdown.\n      </p>\n      <Row>\n        <Col sm={6}>\n          <Dropdown>\n            <Dropdown.Toggle variant=\"light\" id=\"dropdown-basic\">\n              Dropdown Button <i className=\"mdi mdi-chevron-down\"></i>\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n              <Dropdown.Item href=\"#/action-1\">Action</Dropdown.Item>\n              <Dropdown.Item href=\"#/action-2\">Another action</Dropdown.Item>\n              <Dropdown.Item href=\"#/action-3\">Something else</Dropdown.Item>\n            </Dropdown.Menu>\n          </Dropdown>\n        </Col>\n        <Col sm={6}>\n          <Dropdown className=\"mt-sm-0 mt-2\">\n            <Dropdown.Toggle as=\"a\" variant=\"light\" className=\"btn btn-light\">\n              Dropdown link <i className=\"mdi mdi-chevron-down\"></i>\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n              <Dropdown.Item href=\"#/action-1\">Action</Dropdown.Item>\n              <Dropdown.Item href=\"#/action-2\">Another action</Dropdown.Item>\n              <Dropdown.Item href=\"#/action-3\">Something else</Dropdown.Item>\n            </Dropdown.Menu>\n          </Dropdown>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nconst ColorVariantButtonDropdown = () => {\n  return (\n    <React.Fragment>\n      <p className=\"mb-1 mt-5 h5\">Variant</p>\n      <p className=\"text-muted font-13 mb-3\">\n        The best part is you can do this with any button variant, too:\n      </p>\n\n      {(colors || []).map((color, index) => {\n        return (\n          <Dropdown key={index} as={ButtonGroup} className=\"mb-2 me-1\">\n            <Dropdown.Toggle variant={color.color}>\n              {color.name} <i className=\"mdi mdi-chevron-down\"></i>\n            </Dropdown.Toggle>\n            <Dropdown.Menu>\n              <Dropdown.Item href=\"#\">Action</Dropdown.Item>\n              <Dropdown.Item href=\"#\">Another action</Dropdown.Item>\n              <Dropdown.Item href=\"#\">Something else here</Dropdown.Item>\n              <Dropdown.Divider />\n              <Dropdown.Item href=\"#\">Separated link</Dropdown.Item>\n            </Dropdown.Menu>\n          </Dropdown>\n        );\n      })}\n    </React.Fragment>\n  );\n};\n\nconst DropendVariationDropdowns = () => {\n  return (\n    <>\n      <p className=\"mb-1 mt-5 h5\">Dropend variation</p>\n      <p className=\"text-muted font-13 mb-3\">\n        Trigger dropdown menus right of their toggle elements, with the{\" \"}\n        <code>drop</code> prop.\n      </p>\n      <Dropdown as={ButtonGroup} className=\"mb-2 me-1\" drop=\"end\">\n        <Dropdown.Toggle variant=\"blue\">\n          Dropend <i className=\"mdi mdi-chevron-right\"></i>\n        </Dropdown.Toggle>\n        <Dropdown.Menu>\n          <Dropdown.Item href=\"#\">Action</Dropdown.Item>\n          <Dropdown.Item href=\"#\">Another action</Dropdown.Item>\n          <Dropdown.Item href=\"#\">Something else here</Dropdown.Item>\n          <Dropdown.Divider />\n          <Dropdown.Item href=\"#\">Separated link</Dropdown.Item>\n        </Dropdown.Menu>\n      </Dropdown>\n      <Dropdown as={ButtonGroup} className=\"mb-2\" drop=\"end\">\n        <Button variant=\"success\">Split Dropend</Button>\n        <Dropdown.Toggle variant=\"success\">\n          <i className=\"mdi mdi-chevron-right\"></i>\n        </Dropdown.Toggle>\n\n        <Dropdown.Menu>\n          <Dropdown.Item href=\"#/action-1\">Action</Dropdown.Item>\n          <Dropdown.Item href=\"#/action-2\">Another action</Dropdown.Item>\n          <Dropdown.Item href=\"#/action-3\">Something else</Dropdown.Item>\n        </Dropdown.Menu>\n      </Dropdown>\n    </>\n  );\n};\n\nconst DropupVariationDropdowns = () => {\n  return (\n    <>\n      <p className=\"mb-1 mt-5 h5\">Dropup variation</p>\n      <p className=\"text-muted font-13 mb-3\">\n        Trigger dropdown menus above of their toggle elements, with the{\" \"}\n        <code>drop</code> prop.\n      </p>\n      <Dropdown as={ButtonGroup} className=\"mb-2 me-1\" drop=\"up\">\n        <Dropdown.Toggle variant=\"light\">\n          Dropup <i className=\"mdi mdi-chevron-up\"></i>\n        </Dropdown.Toggle>\n        <Dropdown.Menu>\n          <Dropdown.Item href=\"#\">Action</Dropdown.Item>\n          <Dropdown.Item href=\"#\">Another action</Dropdown.Item>\n          <Dropdown.Item href=\"#\">Something else here</Dropdown.Item>\n          <Dropdown.Divider as=\"div\" />\n          <Dropdown.Item href=\"#\">Separated link</Dropdown.Item>\n        </Dropdown.Menu>\n      </Dropdown>\n      <Dropdown as={ButtonGroup} className=\"mb-2\" drop=\"up\">\n        <Button variant=\"light\">Split Dropup</Button>\n        <Dropdown.Toggle variant=\"light\">\n          <i className=\"mdi mdi-chevron-up\"></i>\n        </Dropdown.Toggle>\n\n        <Dropdown.Menu>\n          <Dropdown.Item href=\"#\">Action</Dropdown.Item>\n          <Dropdown.Item href=\"#\">Another action</Dropdown.Item>\n          <Dropdown.Item href=\"#\">Something else here</Dropdown.Item>\n          <Dropdown.Divider as=\"div\" />\n          <Dropdown.Item href=\"#\">Separated link</Dropdown.Item>\n        </Dropdown.Menu>\n      </Dropdown>\n    </>\n  );\n};\n\nconst ActiveItemDropdown = () => {\n  return (\n    <>\n      <p className=\"mb-1 mt-5 h5\">Active Item</p>\n      <p className=\"text-muted font-13 mb-3\">\n        Add <code>active</code> prop to item in the dropdown to{\" \"}\n        <strong>style them as active</strong>.\n      </p>\n\n      <Dropdown as={ButtonGroup}>\n        <Dropdown.Toggle variant=\"secondary\">\n          Active Item <i className=\"mdi mdi-chevron-down\"></i>\n        </Dropdown.Toggle>\n        <Dropdown.Menu>\n          <Dropdown.Item>Regular link</Dropdown.Item>\n          <Dropdown.Item active>Active link</Dropdown.Item>\n          <Dropdown.Item>Another link</Dropdown.Item>\n        </Dropdown.Menu>\n      </Dropdown>\n    </>\n  );\n};\n\nconst DropdownWithHeader = () => {\n  return (\n    <>\n      <p className=\"mb-1 mt-5 h5\">Headers</p>\n\n      <p className=\"text-muted font-13 mb-3\">\n        Add a header to label sections of actions.\n      </p>\n\n      <Dropdown as={ButtonGroup}>\n        <Dropdown.Toggle variant=\"secondary\">\n          Header <i className=\"mdi mdi-chevron-down\"></i>\n        </Dropdown.Toggle>\n        <Dropdown.Menu>\n          <Dropdown.Header>Dropdown header</Dropdown.Header>\n          <Dropdown.Item>Action</Dropdown.Item>\n          <Dropdown.Item>Another action</Dropdown.Item>\n        </Dropdown.Menu>\n      </Dropdown>\n    </>\n  );\n};\n\nconst CustomDropdown = () => {\n  return (\n    <>\n      <p className=\"mb-1 mt-5 h5\">Forms</p>\n      <p className=\"text-muted font-13 mb-3\">\n        Put a form within a dropdown menu, or make it into a dropdown menu, and\n        use margin or padding utilities to give it the negative space you\n        require.\n      </p>\n\n      <Dropdown>\n        <Dropdown.Toggle variant=\"secondary\">\n          Form <i className=\"mdi mdi-chevron-down\"></i>\n        </Dropdown.Toggle>\n        <Dropdown.Menu>\n          <form className=\"px-4 py-3\">\n            <div className=\"mb-2\">\n              <label htmlFor=\"exampleDropdownFormEmail1\" className=\"form-label\">\n                Email address\n              </label>\n              <input\n                type=\"email\"\n                className=\"form-control\"\n                id=\"exampleDropdownFormEmail1\"\n                placeholder=\"email@example.com\"\n              />\n            </div>\n            <div className=\"mb-2\">\n              <label\n                htmlFor=\"exampleDropdownFormPassword1\"\n                className=\"form-label\"\n              >\n                Password\n              </label>\n              <input\n                type=\"password\"\n                className=\"form-control\"\n                id=\"exampleDropdownFormPassword1\"\n                placeholder=\"Password\"\n              />\n            </div>\n            <div className=\"mb-2\">\n              <div className=\"form-check\">\n                <input\n                  type=\"checkbox\"\n                  className=\"form-check-input\"\n                  id=\"dropdownCheck\"\n                />\n                <label className=\"form-check-label\" htmlFor=\"dropdownCheck\">\n                  Remember me\n                </label>\n              </div>\n            </div>\n            <button type=\"submit\" className=\"btn btn-primary\">\n              Sign in\n            </button>\n          </form>\n          <Dropdown.Divider />\n          <Dropdown.Item eventKey=\"4\">New around here? Sign up</Dropdown.Item>\n          <Dropdown.Item eventKey=\"4\">Forgot password?</Dropdown.Item>\n        </Dropdown.Menu>\n      </Dropdown>\n    </>\n  );\n};\n\nconst SplitColorVariantButtonDropdown = () => {\n  return (\n    <React.Fragment>\n      <p className=\"mb-1 h5\">Split button dropdowns</p>\n      <p className=\"text-muted font-13 mb-3\">\n        You can split button dropdowns by adding <code>SplitButton</code>.\n      </p>\n      {(colors || []).map((color, index) => {\n        return (\n          <Dropdown key={index} as={ButtonGroup} className=\"me-1 mb-2\">\n            <Button variant={color.color}>{color.name} </Button>\n\n            <Dropdown.Toggle split variant={color.color}>\n              <i className=\"mdi mdi-chevron-down\"></i>\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n              <Dropdown.Item eventKey=\"1\">Action</Dropdown.Item>\n              <Dropdown.Item eventKey=\"2\">Another action</Dropdown.Item>\n              <Dropdown.Item eventKey=\"3\">Something else here</Dropdown.Item>\n              <Dropdown.Divider />\n              <Dropdown.Item eventKey=\"4\">Separated link</Dropdown.Item>\n            </Dropdown.Menu>\n          </Dropdown>\n        );\n      })}\n    </React.Fragment>\n  );\n};\n\nconst ButtonDropdownSizes = () => {\n  const sizes = [\n    {\n      size: \"lg\",\n      name: \"Large button\",\n    },\n    {\n      size: \"sm\",\n      name: \"Small button\",\n    },\n  ];\n  return (\n    <React.Fragment>\n      <p className=\"mb-1 h5 mt-5\">Sizing</p>\n      <p className=\"text-muted font-13 mb-3\">\n        Button dropdowns work with buttons of all sizes, including default and\n        split dropdown buttons.\n      </p>\n      {(sizes || []).map((item, index) => {\n        return (\n          <React.Fragment key={index}>\n            <Dropdown as={ButtonGroup} size={item.size} className=\"mb-2 me-1\">\n              <Dropdown.Toggle variant=\"light\">\n                {item.name} <i className=\"mdi mdi-chevron-down\"></i>\n              </Dropdown.Toggle>\n              <Dropdown.Menu>\n                <Dropdown.Item href=\"#\">Action</Dropdown.Item>\n                <Dropdown.Item href=\"#\">Another action</Dropdown.Item>\n                <Dropdown.Item href=\"#\">Something else here</Dropdown.Item>\n                <Dropdown.Divider as=\"div\" />\n                <Dropdown.Item href=\"#\">Separated link</Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n            <Dropdown as={ButtonGroup} size={item.size} className=\"me-1 mb-2\">\n              <Button variant=\"light\">{item.name}</Button>\n              <Dropdown.Toggle variant=\"light\">\n                <i className=\"mdi mdi-chevron-down\"></i>\n              </Dropdown.Toggle>\n\n              <Dropdown.Menu>\n                <Dropdown.Item href=\"#\">Action</Dropdown.Item>\n                <Dropdown.Item href=\"#\">Another action</Dropdown.Item>\n                <Dropdown.Item href=\"#\">Something else here</Dropdown.Item>\n                <Dropdown.Divider as=\"div\" />\n                <Dropdown.Item href=\"#\">Separated link</Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n          </React.Fragment>\n        );\n      })}\n    </React.Fragment>\n  );\n};\n\nconst DropstartVariationDropdowns = () => {\n  return (\n    <>\n      <p className=\"mb-1 mt-5 h5\">Dropstart variation</p>\n      <p className=\"text-muted font-13 mb-3\">\n        Trigger dropdown menus left of their toggle elements, with the{\" \"}\n        <code>drop</code> prop.\n      </p>\n      <Dropdown as={ButtonGroup} className=\"mb-2 me-1\" drop=\"start\">\n        <Dropdown.Toggle variant=\"info\">\n          <i className=\"mdi mdi-chevron-left\"></i>Dropstart\n        </Dropdown.Toggle>\n        <Dropdown.Menu>\n          <Dropdown.Item href=\"#\">Action</Dropdown.Item>\n          <Dropdown.Item href=\"#\">Another action</Dropdown.Item>\n          <Dropdown.Item href=\"#\">Something else here</Dropdown.Item>\n          <Dropdown.Divider />\n          <Dropdown.Item href=\"#\">Separated link</Dropdown.Item>\n        </Dropdown.Menu>\n      </Dropdown>\n      <Dropdown as={ButtonGroup} className=\"mb-2\" drop=\"start\">\n        <Dropdown.Toggle variant=\"secondary\">\n          <i className=\"mdi mdi-chevron-left\"></i>\n        </Dropdown.Toggle>\n        <Button variant=\"secondary\">Split dropstart</Button>\n\n        <Dropdown.Menu>\n          <Dropdown.Item href=\"#/action-1\">Action</Dropdown.Item>\n          <Dropdown.Item href=\"#/action-2\">Another action</Dropdown.Item>\n          <Dropdown.Item href=\"#/action-3\">Something else</Dropdown.Item>\n        </Dropdown.Menu>\n      </Dropdown>\n    </>\n  );\n};\n\nconst DropdownMenuAlignment = () => {\n  return (\n    <>\n      <p className=\"mb-1 h5 mt-5\">Menu alignment</p>\n      <p className=\"text-muted font-13 mb-3\">\n        Passing <code>right</code> to the <code>menuAligh</code> prop on the\n        <code> DropdownButton</code> to right align the dropdown menu.\n      </p>\n\n      <Dropdown as={ButtonGroup} className=\"mb-2 me-1\" align=\"end\">\n        <Dropdown.Toggle variant=\"light\">\n          Right-aligned <i className=\"mdi mdi-chevron-down\"></i>\n        </Dropdown.Toggle>\n        <Dropdown.Menu>\n          <Dropdown.Item href=\"#\">Action</Dropdown.Item>\n          <Dropdown.Item href=\"#\">Another action</Dropdown.Item>\n          <Dropdown.Item href=\"#\">Something else here</Dropdown.Item>\n        </Dropdown.Menu>\n      </Dropdown>\n    </>\n  );\n};\n\nconst DisabledItemDropdown = () => {\n  return (\n    <>\n      <p className=\"mb-1 mt-5 h5\">Disabled Item</p>\n\n      <p className=\"text-muted font-13 mb-3\">\n        Add <code>disabled</code> prop to item in the dropdown to{\" \"}\n        <strong>style them as disabled</strong>.\n      </p>\n\n      <Dropdown as={ButtonGroup}>\n        <Dropdown.Toggle>\n          Disabled <i className=\"mdi mdi-chevron-down\"></i>\n        </Dropdown.Toggle>\n        <Dropdown.Menu>\n          <Dropdown.Item>Regular link</Dropdown.Item>\n          <Dropdown.Item disabled>Disabled link</Dropdown.Item>\n          <Dropdown.Item>Another link</Dropdown.Item>\n        </Dropdown.Menu>\n      </Dropdown>\n    </>\n  );\n};\n\nconst DropdownWithText = () => {\n  return (\n    <>\n      <p className=\"mb-1 mt-5 h5\">Text</p>\n      <p className=\"text-muted font-13 mb-3\">\n        Place any freeform text within a dropdown menu with text and use spacing\n        utilities. Note that you’ll likely need additional sizing styles to\n        constrain the menu width.\n      </p>\n\n      <Dropdown as={ButtonGroup}>\n        <Dropdown.Toggle>\n          Text Dropdown <i className=\"mdi mdi-chevron-down\"></i>\n        </Dropdown.Toggle>\n        <Dropdown.Menu className=\"p-3 text-muted\" style={{ maxWidth: \"200px\" }}>\n          <p>Some example text that's free-flowing within the dropdown menu.</p>\n          <p className=\"mb-0\">And this is more example text.</p>\n        </Dropdown.Menu>\n      </Dropdown>\n    </>\n  );\n};\n\nconst Dropdowns = () => {\n  return (\n    <React.Fragment>\n      <PageTitle\n        breadCrumbItems={[\n          { label: \"Base UI\", path: \"/ui/dropdowns\" },\n          { label: \"Dropdowns\", path: \"/ui/dropdowns\", active: true },\n        ]}\n        title={\"Dropdowns\"}\n      />\n\n      <Row>\n        <Col>\n          <Card>\n            <Card.Body>\n              <h4 className=\"header-title\">Examples</h4>\n              <p className=\"sub-header\">\n                Toggle contextual overlays for displaying lists of links and\n                more with the Bootstrap dropdown plugin.\n              </p>\n\n              <Row>\n                <Col xl={6}>\n                  <SingleButtonDropdown />\n                  <ColorVariantButtonDropdown />\n                  <DropendVariationDropdowns />\n                  <DropupVariationDropdowns />\n                  <ActiveItemDropdown />\n                  <DropdownWithHeader />\n                  <CustomDropdown />\n                </Col>\n\n                <Col xl={6} className=\"mt-5 mt-xl-0\">\n                  <SplitColorVariantButtonDropdown />\n                  <ButtonDropdownSizes />\n                  <DropstartVariationDropdowns />\n                  <DropdownMenuAlignment />\n                  <DisabledItemDropdown />\n                  <DropdownWithText />\n                </Col>\n              </Row>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </React.Fragment>\n  );\n};\n\nexport default Dropdowns;\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst defaultProps = {\n  vertical: false,\n  role: 'group'\n};\nconst ButtonGroup = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  size,\n  vertical,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...rest\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'btn-group');\n  let baseClass = prefix;\n  if (vertical) baseClass = `${prefix}-vertical`;\n  return /*#__PURE__*/_jsx(Component, { ...rest,\n    ref: ref,\n    className: classNames(className, baseClass, size && `${prefix}-${size}`)\n  });\n});\nButtonGroup.displayName = 'ButtonGroup';\nButtonGroup.defaultProps = defaultProps;\nexport default ButtonGroup;"],"names":["colors","name","color","SingleButtonDropdown","_jsxs","_Fragment","children","_jsx","className","Row","Col","sm","Dropdown","variant","id","href","as","ColorVariantButtonDropdown","React","map","index","ButtonGroup","DropendVariationDropdowns","drop","Button","DropupVariationDropdowns","ActiveItemDropdown","active","DropdownWithHeader","CustomDropdown","htmlFor","type","placeholder","eventKey","SplitColorVariantButtonDropdown","split","ButtonDropdownSizes","size","item","DropstartVariationDropdowns","DropdownMenuAlignment","align","DisabledItemDropdown","disabled","DropdownWithText","style","maxWidth","PageTitle","breadCrumbItems","label","path","title","Card","xl","_ref","ref","bsPrefix","vertical","_ref$as","Component","rest","_objectWithoutProperties","_excluded","prefix","useBootstrapPrefix","baseClass","concat","_objectSpread","classNames","displayName","defaultProps","role"],"sourceRoot":""}