{"version":3,"file":"static/js/3603.7109f846.chunk.js","mappings":"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","sources":["pages/apps/Projects/ProjectForm.tsx","pages/apps/Projects/helper.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Row, Col, Card, Button } from \"react-bootstrap\";\nimport { Typeahead } from \"react-bootstrap-typeahead\";\n\n// components\nimport PageTitle from \"../../../components/PageTitle\";\nimport { FormInput } from \"../../../components\";\nimport { createProject, getProjectById, updateProject } from \"./helper\";\nimport { useParams } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\nimport config from \"../../../config\";\n\nconst history = createBrowserHistory();\n\ninterface MemberTypes {\n  value: string;\n  name: string;\n}\n\nconst ProjectForm = () => {\n  const [formData, setFormData] = useState<any>({\n    title: \"\",\n    companyName: \"\",\n    state: \"Planning\",\n    shortDesc: \"\",\n    teamMembers: [],\n  });\n\n  const [teamMembers, setTeamMembers] = useState<MemberTypes[]>([]);\n  const [selectedTeamMembers, setSelectedTeamMembers] = useState<MemberTypes[]>(\n    []\n  );\n\n  const loadTeamMembers = () =>\n    fetch(`${config.API_URL}/memberType`).then((response) => response.json());\n\n  useEffect(() => {\n    loadTeamMembers().then(setTeamMembers);\n  }, []);\n\n  const { id } = useParams(); // This gets the 'id' parameter from the URL\n\n  useEffect(() => {\n    getProjectById(id).then((project) => {\n      setFormData({\n        title: project.title || \"\",\n        companyName: project.companyName || \"\",\n        state: project.state || \"Planning\",\n        shortDesc: project.shortDesc || \"\",\n        teamMembers: project.teamMembers || [],\n      });\n      setSelectedTeamMembers(project.teamMembers || []);\n    });\n  }, [id]);\n\n  const onSubmit = async (e: any) => {\n    e.preventDefault();\n    // Call the helper method to submit data\n    if (id) {\n      await updateProject(id, formData).then(() => {\n        window.location.href = \"/apps/projects/list\";\n      });\n    } else {\n      await createProject(formData).then(() => {\n        window.location.href = \"/apps/projects/list\";\n      });\n    }\n\n    // You can also perform any additional actions after successful submission\n  };\n\n  const handleInputChange = (\n    e: React.ChangeEvent<\n      HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement\n    >\n  ) => {\n    const { name, value } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value,\n    });\n  };\n\n  const handleTeamMembersChange = (selected: MemberTypes[]) => {\n    setSelectedTeamMembers(selected);\n    setFormData({\n      ...formData,\n      teamMembers: selected,\n    });\n  };\n\n  return (\n    <>\n      <PageTitle\n        breadCrumbItems={[\n          { label: \"Projects\", path: \"/apps/projects/list\" },\n          {\n            label: id ? \"Edit Project\" : \"Create Project\",\n            path: id ? `/apps/projects/${id}/edit` : \"/apps/projects/create\",\n            active: true,\n          },\n        ]}\n        title={id ? \"Edit Project\" : \"Create Project\"}\n      />\n\n      <Row>\n        <Col>\n          <Card>\n            <Card.Body>\n              <Row>\n                <Col xl={12}>\n                  <FormInput\n                    name=\"title\"\n                    label=\"Project Name\"\n                    placeholder=\"Enter project name\"\n                    containerClass={\"mb-3\"}\n                    key=\"title\"\n                    value={formData.title}\n                    onChange={handleInputChange}\n                  />\n                  <FormInput\n                    name=\"companyName\"\n                    label=\"Company Name\"\n                    placeholder=\"Enter company name\"\n                    containerClass={\"mb-3\"}\n                    key=\"name\"\n                    value={formData.companyName}\n                    onChange={handleInputChange}\n                  />\n                  <FormInput\n                    label=\"Project Status\"\n                    type=\"select\"\n                    name=\"state\"\n                    placeholder=\"Select Project Status\"\n                    key=\"state\"\n                    containerClass={\"mb-3\"}\n                    value={formData.state}\n                    onChange={handleInputChange}\n                  >\n                    <option value={\"Planning\"}>Planning</option>\n                    <option value={\"Ongoing\"}>On Going</option>\n                    <option value={\"Finished\"}>Finished</option>\n                  </FormInput>\n                  <FormInput\n                    name=\"shortDesc\"\n                    label=\"Project Overview\"\n                    placeholder=\"Enter some brief about project..\"\n                    type=\"textarea\"\n                    rows=\"5\"\n                    containerClass={\"mb-3\"}\n                    value={formData.shortDesc}\n                    onChange={handleInputChange}\n                    key=\"overview\"\n                  />\n                  <label>Team Member's</label>\n                  <Typeahead\n                    id=\"teamMembers\"\n                    labelKey=\"name\"\n                    multiple\n                    options={formData.teamMembers.concat(teamMembers) || []}\n                    selected={selectedTeamMembers}\n                    onChange={handleTeamMembersChange}\n                  />\n                </Col>\n              </Row>\n\n              <Row className=\"mt-2\">\n                <Col className=\"text-center\">\n                  <Button\n                    variant=\"success\"\n                    className=\"waves-effect waves-light m-1\"\n                    onClick={onSubmit}\n                  >\n                    <i className=\"fe-check-circle me-1\"></i>{\" \"}\n                    {id ? \"Update\" : \"Create\"}\n                  </Button>\n                  <Button\n                    variant=\"light\"\n                    className=\"waves-effect waves-light m-1\"\n                  >\n                    <i className=\"fe-x me-1\"></i> Cancel\n                  </Button>\n                </Col>\n              </Row>\n            </Card.Body>\n          </Card>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default ProjectForm;\n","// helper.js\n\nimport config from \"../../../config\";\n\nconst BASE_URL = `${config.API_URL}/project`; // Replace with your actual base URL\n\nconst getProjects = async () => {\n  const response = await fetch(`${BASE_URL}`);\n  return response.json();\n};\n\nconst getProjectById = async (id) => {\n  const response = await fetch(`${BASE_URL}/${id}`);\n  return response.json();\n};\n\nconst createProject = async (project) => {\n  const response = await fetch(`${BASE_URL}`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(project),\n  });\n  return response.json();\n};\n\nconst updateProject = async (id, updates) => {\n  const response = await fetch(`${BASE_URL}/${id}`, {\n    method: \"PATCH\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(updates),\n  });\n  return response.json();\n};\n\nconst deleteProject = async (id) => {\n  const response = await fetch(`${BASE_URL}/${id}`, {\n    method: \"DELETE\",\n  });\n  return response.json();\n};\n\nexport {\n  getProjects,\n  getProjectById,\n  createProject,\n  updateProject,\n  deleteProject,\n};\n"],"names":["createBrowserHistory","_useState","useState","title","companyName","state","shortDesc","teamMembers","_useState2","_slicedToArray","formData","setFormData","_useState3","_useState4","setTeamMembers","_useState5","_useState6","selectedTeamMembers","setSelectedTeamMembers","useEffect","fetch","concat","config","then","response","json","id","useParams","getProjectById","project","onSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","e","_context","prev","next","preventDefault","updateProject","window","location","href","createProject","stop","_x","apply","arguments","handleInputChange","_e$target","target","name","value","_objectSpread","_defineProperty","_jsxs","_Fragment","children","_jsx","PageTitle","breadCrumbItems","label","path","active","Row","Col","Card","xl","FormInput","placeholder","containerClass","onChange","type","rows","Typeahead","labelKey","multiple","options","selected","className","Button","variant","onClick","BASE_URL","getProjects","sent","abrupt","_ref2","_callee2","_context2","_ref3","_callee3","_context3","method","headers","body","JSON","stringify","_x2","_ref4","_callee4","updates","_context4","_x3","_x4","deleteProject","_ref5","_callee5","_context5","_x5"],"sourceRoot":""}