{"version":3,"file":"static/js/4147.5ca00a4b.chunk.js","mappings":"4QAyEA,EAvDwB,SAACA,GACvB,IACAC,GAAwCC,EAAAA,EAAAA,WAAkB,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAzDI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GAK9BI,EAAiB,WACrBD,GAAiBD,EACnB,EAEA,OACEG,EAAAA,EAAAA,MAACC,EAAAA,EAAQ,CAACC,KAAML,EAAcM,SAAUJ,EAAeK,SAAA,EACrDC,EAAAA,EAAAA,KAACJ,EAAAA,EAAAA,OAAe,CACdK,GAAG,mBACHC,GAAG,IACHC,QAAST,EACTU,UAAWC,IACT,kDACA,CAAER,KAAML,IACRO,UAGFJ,EAAAA,EAAAA,MAAA,QAAMS,UAAU,qBAAoBL,SAAA,CACjCZ,EAAgB,SAAE,KAACa,EAAAA,EAAAA,KAAA,KAAGI,UAAU,+BAGrCJ,EAAAA,EAAAA,KAACJ,EAAAA,EAAAA,KAAa,CAACQ,UAAU,mDAAkDL,UACzEC,EAAAA,EAAAA,KAAA,OAAKG,QAAST,EAAeK,UAIzBZ,EAAMmB,WAAa,IAAIC,KAAI,SAACC,EAAMC,GAClC,OACEd,EAAAA,EAAAA,MAACe,EAAAA,SAAc,CAAAX,SAAA,CACZU,IAAMtB,EAAiB,UAAEwB,OAAS,IACjCX,EAAAA,EAAAA,KAAA,OAAKI,UAAU,sBAEjBT,EAAAA,EAAAA,MAACiB,EAAAA,GAAI,CACHC,GAAIL,EAAKM,WACTV,UAAU,4BAA2BL,SAAA,EAGrCC,EAAAA,EAAAA,KAAA,KAAGI,UAAS,GAAAW,OAAKP,EAAKQ,KAAI,YAC1BhB,EAAAA,EAAAA,KAAA,QAAAD,SAAOS,EAAKS,UAHPR,EAAI,mBAPQA,EAczB,UAKV,E,gCCiBMS,EAAe,CAgBnB,CACED,MAAO,SACPD,KAAM,aACNF,WAAY,iBA6ShB,EArMe,SAAHK,GAKQ,IAJlBC,EAAQD,EAARC,SACAC,EAAaF,EAAbE,cAOMC,GANcH,EAApBI,qBACUJ,EAAVK,YAEiBC,EAAAA,EAAAA,OACCC,EAAAA,EAAAA,KAAVC,MAEyBN,GAAiB,IAC5CO,EAA+BR,EAA+B,GAApB,kBAEhDS,GAAwCC,EAAAA,EAAAA,KAAY,SAACC,GAAgB,MAAM,CACzEC,WAAYD,EAAME,OAAOD,WACzBE,gBAAiBH,EAAME,OAAOC,gBAC/B,IAHiBL,EAAVG,WAA2BH,EAAfK,gBAqEpB,IAaMC,EAAaC,eAAeC,QAAQ,eAAiB,GACrDC,EAAOC,KAAKC,MAAML,GAClBM,EAAI,GAAA1B,QAAU,OAAJuB,QAAI,IAAJA,OAAI,EAAJA,EAAMI,YAAa,GAAE,KAAA3B,QAAQ,OAAJuB,QAAI,IAAJA,OAAI,EAAJA,EAAMK,WAAY,IAC3D,OACE3C,EAAAA,EAAAA,KAACU,EAAAA,SAAc,CAAAX,UACbC,EAAAA,EAAAA,KAAA,OAAKI,UAAS,iBAAAW,OAAmBO,GAAmBvB,UAClDJ,EAAAA,EAAAA,MAAA,OAAKS,UAAS,UAAAW,OAAYa,GAAsB7B,SAAA,EAC9CC,EAAAA,EAAAA,KAAA,OAAKI,UAAU,iDAsDfJ,EAAAA,EAAAA,KAAA,MAAII,UAAU,wCAAuCL,UAmBnDC,EAAAA,EAAAA,KAAA,MAAII,UAAU,WAAUL,UACtBC,EAAAA,EAAAA,KAAC4C,EAAe,CACdC,WAAYA,EACZvC,UAAWY,EACX4B,SAAUL,EACVM,UAAW,sBAgB3B,C","sources":["components/ProfileDropdown.tsx","layouts/Topbar.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Dropdown } from \"react-bootstrap\";\nimport classNames from \"classnames\";\n\ninterface ProfileMenuItem {\n  label: string;\n  icon: string;\n  redirectTo: string;\n}\n\ninterface ProfileDropdownProps {\n  menuItems: Array<ProfileMenuItem>;\n  profilePic?: string;\n  username: string;\n  userTitle?: string;\n}\n\nconst ProfileDropdown = (props: ProfileDropdownProps) => {\n  const profilePic = null;\n  const [dropdownOpen, setDropdownOpen] = useState<boolean>(false);\n\n  /*\n   * toggle profile-dropdown\n   */\n  const toggleDropdown = () => {\n    setDropdownOpen(!dropdownOpen);\n  };\n\n  return (\n    <Dropdown show={dropdownOpen} onToggle={toggleDropdown}>\n      <Dropdown.Toggle\n        id=\"dropdown-profile\"\n        as=\"a\"\n        onClick={toggleDropdown}\n        className={classNames(\n          \"nav-link nav-user me-0 waves-effect waves-light\",\n          { show: dropdownOpen }\n        )}\n      >\n        {/* <img src={profilePic!} className=\"rounded-circle\" alt=\"\" /> */}\n        <span className=\"pro-user-name ms-1\">\n          {props[\"username\"]} <i className=\"mdi mdi-chevron-down\"></i>\n        </span>\n      </Dropdown.Toggle>\n      <Dropdown.Menu className=\"dropdown-menu dropdown-menu-end profile-dropdown\">\n        <div onClick={toggleDropdown}>\n          {/* <div className=\"dropdown-header noti-title\">\n            <h6 className=\"text-overflow m-0\">Welcome !</h6>\n          </div> */}\n          {(props.menuItems || []).map((item, i) => {\n            return (\n              <React.Fragment key={i}>\n                {i === props[\"menuItems\"].length - 1 && (\n                  <div className=\"dropdown-divider\"></div>\n                )}\n                <Link\n                  to={item.redirectTo}\n                  className=\"dropdown-item notify-item\"\n                  key={i + \"-profile-menu\"}\n                >\n                  <i className={`${item.icon} me-1`}></i>\n                  <span>{item.label}</span>\n                </Link>\n              </React.Fragment>\n            );\n          })}\n        </div>\n      </Dropdown.Menu>\n    </Dropdown>\n  );\n};\n\nexport default ProfileDropdown;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useSelector, useDispatch } from \"react-redux\";\n// import classNames from 'classnames';\n\n// actions\nimport { showRightSidebar, changeSidebarType } from \"../redux/actions\";\n\n// store\nimport { RootState, AppDispatch } from \"../redux/store\";\n\n//constants\nimport { LayoutTypes, SideBarTypes } from \"../constants/layout\";\n\n// components\nimport TopbarSearch from \"../components/TopbarSearch\";\nimport MaximizeScreen from \"../components/MaximizeScreen\";\nimport AppsDropdown from \"../components/AppsDropdown/\";\n// import SearchDropdown from '../components/SearchDropdown';\nimport LanguageDropdown from \"../components/LanguageDropdown\";\nimport NotificationDropdown from \"../components/NotificationDropdown\";\nimport ProfileDropdown from \"../components/ProfileDropdown\";\nimport CreateNew from \"../components/CreateNew\";\nimport MegaMenu from \"../components/MegaMenu\";\n\nimport profilePic from \"../assets/images/users/user-1.jpg\";\nimport avatar4 from \"../assets/images/users/user-4.jpg\";\nimport logoSm from \"../assets/images/logo-sm.png\";\nimport logoDark from \"../assets/images/logo-dark.png\";\nimport logoDark2 from \"../assets/images/logo-dark-2.png\";\nimport logoLight from \"../assets/images/logo-light.png\";\nimport logoLight2 from \"../assets/images/logo-light-2.png\";\nimport { useViewport } from \"../hooks/useViewPort\";\n\nexport interface NotificationItem {\n  id: number;\n  text: string;\n  subText: string;\n  icon?: string;\n  avatar?: string;\n  bgColor?: string;\n}\n\n// get the notifications\nconst Notifications: NotificationItem[] = [\n  {\n    id: 1,\n    text: \"Cristina Pride\",\n    subText: \"Hi, How are you? What about our next meeting\",\n    avatar: profilePic,\n  },\n  {\n    id: 2,\n    text: \"Caleb Flakelar commented on Admin\",\n    subText: \"1 min ago\",\n    icon: \"mdi mdi-comment-account-outline\",\n    bgColor: \"primary\",\n  },\n  {\n    id: 3,\n    text: \"Karen Robinson\",\n    subText: \"Wow ! this admin looks good and awesome design\",\n    avatar: avatar4,\n  },\n  {\n    id: 4,\n    text: \"New user registered.\",\n    subText: \"5 hours ago\",\n    icon: \"mdi mdi-account-plus\",\n    bgColor: \"warning\",\n  },\n  {\n    id: 5,\n    text: \"Caleb Flakelar commented on Admin\",\n    subText: \"1 min ago\",\n    icon: \"mdi mdi-comment-account-outline\",\n    bgColor: \"info\",\n  },\n  {\n    id: 6,\n    text: \"Carlos Crouch liked Admin\",\n    subText: \"13 days ago\",\n    icon: \"mdi mdi-heart\",\n    bgColor: \"secondary\",\n  },\n];\n\n// get the profilemenu\nconst ProfileMenus = [\n  // {\n  //   label: \"My Account\",\n  //   icon: \"fe-user\",\n  //   redirectTo: \"#\",\n  // },\n  // {\n  //   label: \"Settings\",\n  //   icon: \"fe-settings\",\n  //   redirectTo: \"#\",\n  // },\n  // {\n  //   label: \"Lock Screen\",\n  //   icon: \"fe-lock\",\n  //   redirectTo: \"/auth/lock-screen\",\n  // },\n  {\n    label: \"Logout\",\n    icon: \"fe-log-out\",\n    redirectTo: \"/auth/logout\",\n  },\n];\n\n// dummy search results\nconst SearchResults = [\n  {\n    id: 1,\n    title: \"Analytics Report\",\n    icon: \"uil-notes\",\n    redirectTo: \"#\",\n  },\n  {\n    id: 2,\n    title: \"How can I help you?\",\n    icon: \"uil-life-ring\",\n    redirectTo: \"#\",\n  },\n  {\n    id: 3,\n    icon: \"uil-cog\",\n    title: \"User profile settings\",\n    redirectTo: \"#\",\n  },\n];\n\nconst otherOptions = [\n  {\n    id: 1,\n    label: \"New Projects\",\n    icon: \"fe-briefcase\",\n  },\n  {\n    id: 2,\n    label: \"Create Users\",\n    icon: \"fe-user\",\n  },\n  {\n    id: 3,\n    label: \"Revenue Report\",\n    icon: \"fe-bar-chart-line-\",\n  },\n  {\n    id: 4,\n    label: \"Settings\",\n    icon: \"fe-settings\",\n  },\n  {\n    id: 4,\n    label: \"Help & Support\",\n    icon: \"fe-headphones\",\n  },\n];\n\n// get mega-menu options\nconst MegaMenuOptions = [\n  {\n    id: 1,\n    title: \"UI Components\",\n    menuItems: [\n      \"Widgets\",\n      \"Nestable List\",\n      \"Range Sliders\",\n      \"Masonry Items\",\n      \"Sweet Alerts\",\n      \"Treeview Page\",\n      \"Tour Page\",\n    ],\n  },\n  {\n    id: 2,\n    title: \"Applications\",\n    menuItems: [\n      \"eCommerce Pages\",\n      \"CRM Pages\",\n      \"Email\",\n      \"Calendar\",\n      \"Team Contacts\",\n      \"Task Board\",\n      \"Email Templates\",\n    ],\n  },\n  {\n    id: 3,\n    title: \"Extra Pages\",\n    menuItems: [\n      \"Left Sidebar with User\",\n      \"Menu Collapsed\",\n      \"Small Left Sidebar\",\n      \"New Header Style\",\n      \"Search Result\",\n      \"Gallery Pages\",\n      \"Maintenance & Coming Soon\",\n    ],\n  },\n];\n\ninterface TopbarProps {\n  hideLogo?: boolean;\n  navCssClasses?: string;\n  openLeftMenuCallBack?: () => void;\n  topbarDark?: boolean;\n}\n\nconst Topbar = ({\n  hideLogo,\n  navCssClasses,\n  openLeftMenuCallBack,\n  topbarDark,\n}: TopbarProps) => {\n  const dispatch = useDispatch<AppDispatch>();\n  const { width } = useViewport();\n\n  const navbarCssClasses: string = navCssClasses || \"\";\n  const containerCssClasses: string = !hideLogo ? \"container-fluid\" : \"\";\n\n  const { layoutType, leftSideBarType } = useSelector((state: RootState) => ({\n    layoutType: state.Layout.layoutType,\n    leftSideBarType: state.Layout.leftSideBarType,\n  }));\n\n  /**\n   * Toggle the leftmenu when having mobile screen\n   */\n  const handleLeftMenuCallBack = () => {\n    if (width < 1140) {\n      if (leftSideBarType === \"full\") {\n        showLeftSideBarBackdrop();\n        document\n          .getElementsByTagName(\"html\")[0]\n          .classList.add(\"sidebar-enable\");\n      } else {\n        dispatch(changeSidebarType(SideBarTypes.LEFT_SIDEBAR_TYPE_FULL));\n      }\n    } else if (leftSideBarType === \"condensed\") {\n      dispatch(changeSidebarType(SideBarTypes.LEFT_SIDEBAR_TYPE_DEFAULT));\n    } else if (leftSideBarType === \"full\") {\n      showLeftSideBarBackdrop();\n      document.getElementsByTagName(\"html\")[0].classList.add(\"sidebar-enable\");\n    } else if (leftSideBarType === \"fullscreen\") {\n      dispatch(changeSidebarType(SideBarTypes.LEFT_SIDEBAR_TYPE_DEFAULT));\n      // showLeftSideBarBackdrop();\n      document.getElementsByTagName(\"html\")[0].classList.add(\"sidebar-enable\");\n    } else {\n      dispatch(changeSidebarType(SideBarTypes.LEFT_SIDEBAR_TYPE_CONDENSED));\n    }\n  };\n\n  // create backdrop for leftsidebar\n  function showLeftSideBarBackdrop() {\n    const backdrop = document.createElement(\"div\");\n    backdrop.id = \"custom-backdrop\";\n    backdrop.className = \"offcanvas-backdrop fade show\";\n    // backdrop.style.zIndex = '999'\n    document.body.appendChild(backdrop);\n\n    if (\n      document.getElementsByTagName(\"html\")[0]?.getAttribute(\"dir\") !== \"rtl\"\n    ) {\n      document.body.style.overflow = \"hidden\";\n      if (width > 1140) {\n        document.body.style.paddingRight = \"15px\";\n      }\n    }\n\n    backdrop.addEventListener(\"click\", function (e) {\n      document\n        .getElementsByTagName(\"html\")[0]\n        .classList.remove(\"sidebar-enable\");\n      dispatch(changeSidebarType(SideBarTypes.LEFT_SIDEBAR_TYPE_FULL));\n      hideLeftSideBarBackdrop();\n    });\n  }\n\n  function hideLeftSideBarBackdrop() {\n    var backdrop = document.getElementById(\"custom-backdrop\");\n    if (backdrop) {\n      document.body.removeChild(backdrop);\n      document.body.style.overflow = \"visible\";\n    }\n  }\n\n  /**\n   * Toggles the right sidebar\n   */\n  const handleRightSideBar = () => {\n    dispatch(showRightSidebar());\n  };\n\n  /**\n   * Toggles the left sidebar width\n   */\n  // const toggleLeftSidebarWidth = () => {\n  //   if (leftSideBarType === 'default' || leftSideBarType === 'compact')\n  //     dispatch(changeSidebarType(SideBarTypes.LEFT_SIDEBAR_TYPE_CONDENSED));\n  //   if (leftSideBarType === 'condensed') dispatch(changeSidebarType(SideBarTypes.LEFT_SIDEBAR_TYPE_DEFAULT));\n  // };\n\n  const userString = sessionStorage.getItem(\"ubold_user\") || \"\";\n  const user = JSON.parse(userString);\n  const name = `${user?.firstName || \"\"} ${user?.lastName || \"\"}`;\n  return (\n    <React.Fragment>\n      <div className={`navbar-custom ${navbarCssClasses}`}>\n        <div className={`topbar ${containerCssClasses}`}>\n          <div className=\"topbar-menu d-flex align-items-center gap-1\">\n            {/* {!hideLogo && (\n              <div className=\"logo-box\">\n                <Link to=\"/\" className=\"logo logo-dark text-center\">\n                  <span className=\"logo-sm\">\n                    <img src={logoSm} alt=\"\" height=\"22\" />\n                  </span>\n                  <span className=\"logo-lg\">\n                    <img\n                      src={\n                        layoutType === LayoutTypes.LAYOUT_TWO_COLUMN\n                          ? logoDark2\n                          : logoDark\n                      }\n                      alt=\"\"\n                      height=\"20\"\n                    />\n                  </span>\n                </Link>\n                <Link to=\"/\" className=\"logo logo-light text-center\">\n                  <span className=\"logo-sm\">\n                    <img src={logoSm} alt=\"\" height=\"22\" />\n                  </span>\n                  <span className=\"logo-lg\">\n                    <img\n                      src={\n                        layoutType === LayoutTypes.LAYOUT_TWO_COLUMN\n                          ? logoLight2\n                          : logoLight\n                      }\n                      alt=\"\"\n                      height=\"20\"\n                    />\n                  </span>\n                </Link>\n              </div>\n            )} */}\n\n            {/* <button\n              className=\"button-toggle-menu\"\n              onClick={handleLeftMenuCallBack}\n            >\n              <i className=\"mdi mdi-menu\" />\n            </button>\n\n            <div className=\"dropdown d-none d-xl-block\">\n              <CreateNew otherOptions={otherOptions} />\n            </div>\n\n            <div className=\"dropdown dropdown-mega d-none d-xl-block\">\n              <MegaMenu subMenus={MegaMenuOptions} />\n            </div> */}\n          </div>\n\n          <ul className=\"topbar-menu d-flex align-items-center\">\n            {/* <li className=\"app-search dropdown d-none d-lg-block\">\n              <TopbarSearch items={SearchResults} />\n            </li> */}\n            {/* <li className=\"dropdown d-inline-block d-lg-none\">\n              <SearchDropdown />\n            </li> */}\n            {/* <li className=\"dropdown d-none d-lg-inline-block\">\n              <MaximizeScreen />\n            </li>\n            <li className=\"dropdown d-none d-lg-inline-block topbar-dropdown\">\n              <AppsDropdown />\n            </li>\n            <li className=\"dropdown d-none d-lg-inline-block topbar-dropdown\">\n              <LanguageDropdown />\n            </li>\n            <li className=\"dropdown notification-list\">\n              <NotificationDropdown notifications={Notifications} />\n            </li> */}\n            <li className=\"dropdown\">\n              <ProfileDropdown\n                profilePic={profilePic}\n                menuItems={ProfileMenus}\n                username={name}\n                userTitle={\"Founder\"}\n              />\n            </li>\n            {/* <li>\n              <button\n                className=\"nav-link dropdown-toggle right-bar-toggle waves-effect waves-light btn btn-link shadow-none\"\n                onClick={handleRightSideBar}\n              >\n                <i className=\"fe-settings noti-icon font-22\"></i>\n              </button>\n            </li> */}\n          </ul>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default Topbar;\n"],"names":["props","_useState","useState","_useState2","_slicedToArray","dropdownOpen","setDropdownOpen","toggleDropdown","_jsxs","Dropdown","show","onToggle","children","_jsx","id","as","onClick","className","classNames","menuItems","map","item","i","React","length","Link","to","redirectTo","concat","icon","label","ProfileMenus","_ref","hideLogo","navCssClasses","navbarCssClasses","openLeftMenuCallBack","topbarDark","useDispatch","useViewport","width","containerCssClasses","_useSelector","useSelector","state","layoutType","Layout","leftSideBarType","userString","sessionStorage","getItem","user","JSON","parse","name","firstName","lastName","ProfileDropdown","profilePic","username","userTitle"],"sourceRoot":""}