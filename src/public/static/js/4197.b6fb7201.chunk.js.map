{"version":3,"file":"static/js/4197.b6fb7201.chunk.js","mappings":"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","sources":["../node_modules/fast-deep-equal/index.js","../node_modules/popper.js/src/utils/isBrowser.js","../node_modules/popper.js/src/utils/debounce.js","../node_modules/popper.js/src/utils/isFunction.js","../node_modules/popper.js/src/utils/getStyleComputedProperty.js","../node_modules/popper.js/src/utils/getParentNode.js","../node_modules/popper.js/src/utils/getScrollParent.js","../node_modules/popper.js/src/utils/getReferenceNode.js","../node_modules/popper.js/src/utils/isIE.js","../node_modules/popper.js/src/utils/getOffsetParent.js","../node_modules/popper.js/src/utils/getRoot.js","../node_modules/popper.js/src/utils/findCommonOffsetParent.js","../node_modules/popper.js/src/utils/isOffsetContainer.js","../node_modules/popper.js/src/utils/getScroll.js","../node_modules/popper.js/src/utils/getBordersSize.js","../node_modules/popper.js/src/utils/getWindowSizes.js","../node_modules/popper.js/src/utils/getClientRect.js","../node_modules/popper.js/src/utils/getBoundingClientRect.js","../node_modules/popper.js/src/utils/getOffsetRectRelativeToArbitraryNode.js","../node_modules/popper.js/src/utils/includeScroll.js","../node_modules/popper.js/src/utils/isFixed.js","../node_modules/popper.js/src/utils/getFixedPositionOffsetParent.js","../node_modules/popper.js/src/utils/getBoundaries.js","../node_modules/popper.js/src/utils/getViewportOffsetRectRelativeToArtbitraryNode.js","../node_modules/popper.js/src/utils/computeAutoPlacement.js","../node_modules/popper.js/src/utils/getReferenceOffsets.js","../node_modules/popper.js/src/utils/getOuterSizes.js","../node_modules/popper.js/src/utils/getOppositePlacement.js","../node_modules/popper.js/src/utils/getPopperOffsets.js","../node_modules/popper.js/src/utils/find.js","../node_modules/popper.js/src/utils/runModifiers.js","../node_modules/popper.js/src/utils/findIndex.js","../node_modules/popper.js/src/methods/update.js","../node_modules/popper.js/src/utils/isModifierEnabled.js","../node_modules/popper.js/src/utils/getSupportedPropertyName.js","../node_modules/popper.js/src/methods/destroy.js","../node_modules/popper.js/src/utils/getWindow.js","../node_modules/popper.js/src/utils/setupEventListeners.js","../node_modules/popper.js/src/methods/enableEventListeners.js","../node_modules/popper.js/src/methods/disableEventListeners.js","../node_modules/popper.js/src/utils/removeEventListeners.js","../node_modules/popper.js/src/utils/isNumeric.js","../node_modules/popper.js/src/utils/setStyles.js","../node_modules/popper.js/src/modifiers/computeStyle.js","../node_modules/popper.js/src/utils/isModifierRequired.js","../node_modules/popper.js/src/methods/placements.js","../node_modules/popper.js/src/utils/clockwise.js","../node_modules/popper.js/src/modifiers/flip.js","../node_modules/popper.js/src/modifiers/offset.js","../node_modules/popper.js/src/modifiers/index.js","../node_modules/popper.js/src/modifiers/shift.js","../node_modules/popper.js/src/modifiers/preventOverflow.js","../node_modules/popper.js/src/modifiers/keepTogether.js","../node_modules/popper.js/src/modifiers/arrow.js","../node_modules/popper.js/src/utils/getOppositeVariation.js","../node_modules/popper.js/src/modifiers/inner.js","../node_modules/popper.js/src/modifiers/hide.js","../node_modules/popper.js/src/utils/getRoundedOffsets.js","../node_modules/popper.js/src/modifiers/applyStyle.js","../node_modules/popper.js/src/utils/setAttributes.js","../node_modules/popper.js/src/methods/defaults.js","../node_modules/popper.js/src/index.js"],"sourcesContent":["'use strict';\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n","export default typeof window !== 'undefined' && typeof document !== 'undefined' && typeof navigator !== 'undefined';\n","import isBrowser from './isBrowser';\n\nconst timeoutDuration = (function(){\n  const longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];\n  for (let i = 0; i < longerTimeoutBrowsers.length; i += 1) {\n    if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {\n      return 1;\n    }\n  }\n  return 0;\n}());\n\nexport function microtaskDebounce(fn) {\n  let called = false\n  return () => {\n    if (called) {\n      return\n    }\n    called = true\n    window.Promise.resolve().then(() => {\n      called = false\n      fn()\n    })\n  }\n}\n\nexport function taskDebounce(fn) {\n  let scheduled = false;\n  return () => {\n    if (!scheduled) {\n      scheduled = true;\n      setTimeout(() => {\n        scheduled = false;\n        fn();\n      }, timeoutDuration);\n    }\n  };\n}\n\nconst supportsMicroTasks = isBrowser && window.Promise\n\n\n/**\n* Create a debounced version of a method, that's asynchronously deferred\n* but called in the minimum time possible.\n*\n* @method\n* @memberof Popper.Utils\n* @argument {Function} fn\n* @returns {Function}\n*/\nexport default (supportsMicroTasks\n  ? microtaskDebounce\n  : taskDebounce);\n","/**\n * Check if the given variable is a function\n * @method\n * @memberof Popper.Utils\n * @argument {Any} functionToCheck - variable to check\n * @returns {Boolean} answer to: is a function?\n */\nexport default function isFunction(functionToCheck) {\n  const getType = {};\n  return (\n    functionToCheck &&\n    getType.toString.call(functionToCheck) === '[object Function]'\n  );\n}\n","/**\n * Get CSS computed property of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Eement} element\n * @argument {String} property\n */\nexport default function getStyleComputedProperty(element, property) {\n  if (element.nodeType !== 1) {\n    return [];\n  }\n  // NOTE: 1 DOM access here\n  const window = element.ownerDocument.defaultView;\n  const css = window.getComputedStyle(element, null);\n  return property ? css[property] : css;\n}\n","/**\n * Returns the parentNode or the host of the element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} parent\n */\nexport default function getParentNode(element) {\n  if (element.nodeName === 'HTML') {\n    return element;\n  }\n  return element.parentNode || element.host;\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport getParentNode from './getParentNode';\n\n/**\n * Returns the scrolling parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} scroll parent\n */\nexport default function getScrollParent(element) {\n  // Return body, `getScroll` will take care to get the correct `scrollTop` from it\n  if (!element) {\n    return document.body\n  }\n\n  switch (element.nodeName) {\n    case 'HTML':\n    case 'BODY':\n      return element.ownerDocument.body\n    case '#document':\n      return element.body\n  }\n\n  // Firefox want us to check `-x` and `-y` variations as well\n  const { overflow, overflowX, overflowY } = getStyleComputedProperty(element);\n  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {\n    return element;\n  }\n\n  return getScrollParent(getParentNode(element));\n}\n","/**\n * Returns the reference node of the reference object, or the reference object itself.\n * @method\n * @memberof Popper.Utils\n * @param {Element|Object} reference - the reference element (the popper will be relative to this)\n * @returns {Element} parent\n */\nexport default function getReferenceNode(reference) {\n  return reference && reference.referenceNode ? reference.referenceNode : reference;\n}\n","import isBrowser from './isBrowser';\n\nconst isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);\nconst isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);\n\n/**\n * Determines if the browser is Internet Explorer\n * @method\n * @memberof Popper.Utils\n * @param {Number} version to check\n * @returns {Boolean} isIE\n */\nexport default function isIE(version) {\n  if (version === 11) {\n    return isIE11;\n  }\n  if (version === 10) {\n    return isIE10;\n  }\n  return isIE11 || isIE10;\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport isIE from './isIE';\n/**\n * Returns the offset parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} offset parent\n */\nexport default function getOffsetParent(element) {\n  if (!element) {\n    return document.documentElement;\n  }\n\n  const noOffsetParent = isIE(10) ? document.body : null;\n\n  // NOTE: 1 DOM access here\n  let offsetParent = element.offsetParent || null;\n  // Skip hidden elements which don't have an offsetParent\n  while (offsetParent === noOffsetParent && element.nextElementSibling) {\n    offsetParent = (element = element.nextElementSibling).offsetParent;\n  }\n\n  const nodeName = offsetParent && offsetParent.nodeName;\n\n  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {\n    return element ? element.ownerDocument.documentElement : document.documentElement;\n  }\n\n  // .offsetParent will return the closest TH, TD or TABLE in case\n  // no offsetParent is present, I hate this job...\n  if (\n    ['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 &&\n    getStyleComputedProperty(offsetParent, 'position') === 'static'\n  ) {\n    return getOffsetParent(offsetParent);\n  }\n\n  return offsetParent;\n}\n","/**\n * Finds the root node (document, shadowDOM root) of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} node\n * @returns {Element} root node\n */\nexport default function getRoot(node) {\n  if (node.parentNode !== null) {\n    return getRoot(node.parentNode);\n  }\n\n  return node;\n}\n","import isOffsetContainer from './isOffsetContainer';\nimport getRoot from './getRoot';\nimport getOffsetParent from './getOffsetParent';\n\n/**\n * Finds the offset parent common to the two provided nodes\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element1\n * @argument {Element} element2\n * @returns {Element} common offset parent\n */\nexport default function findCommonOffsetParent(element1, element2) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {\n    return document.documentElement;\n  }\n\n  // Here we make sure to give as \"start\" the element that comes first in the DOM\n  const order =\n    element1.compareDocumentPosition(element2) &\n    Node.DOCUMENT_POSITION_FOLLOWING;\n  const start = order ? element1 : element2;\n  const end = order ? element2 : element1;\n\n  // Get common ancestor container\n  const range = document.createRange();\n  range.setStart(start, 0);\n  range.setEnd(end, 0);\n  const { commonAncestorContainer } = range;\n\n  // Both nodes are inside #document\n  if (\n    (element1 !== commonAncestorContainer &&\n      element2 !== commonAncestorContainer) ||\n    start.contains(end)\n  ) {\n    if (isOffsetContainer(commonAncestorContainer)) {\n      return commonAncestorContainer;\n    }\n\n    return getOffsetParent(commonAncestorContainer);\n  }\n\n  // one of the nodes is inside shadowDOM, find which one\n  const element1root = getRoot(element1);\n  if (element1root.host) {\n    return findCommonOffsetParent(element1root.host, element2);\n  } else {\n    return findCommonOffsetParent(element1, getRoot(element2).host);\n  }\n}\n","import getOffsetParent from './getOffsetParent';\n\nexport default function isOffsetContainer(element) {\n  const { nodeName } = element;\n  if (nodeName === 'BODY') {\n    return false;\n  }\n  return (\n    nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element\n  );\n}\n","/**\n * Gets the scroll value of the given element in the given side (top and left)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {String} side `top` or `left`\n * @returns {number} amount of scrolled pixels\n */\nexport default function getScroll(element, side = 'top') {\n  const upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';\n  const nodeName = element.nodeName;\n\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    const html = element.ownerDocument.documentElement;\n    const scrollingElement = element.ownerDocument.scrollingElement || html;\n    return scrollingElement[upperSide];\n  }\n\n  return element[upperSide];\n}\n","/*\n * Helper to detect borders of a given element\n * @method\n * @memberof Popper.Utils\n * @param {CSSStyleDeclaration} styles\n * Result of `getStyleComputedProperty` on the given element\n * @param {String} axis - `x` or `y`\n * @return {number} borders - The borders size of the given axis\n */\n\nexport default function getBordersSize(styles, axis) {\n  const sideA = axis === 'x' ? 'Left' : 'Top';\n  const sideB = sideA === 'Left' ? 'Right' : 'Bottom';\n\n  return (\n    parseFloat(styles[`border${sideA}Width`]) +\n    parseFloat(styles[`border${sideB}Width`])\n  );\n}\n","import isIE from './isIE';\n\nfunction getSize(axis, body, html, computedStyle) {\n  return Math.max(\n    body[`offset${axis}`],\n    body[`scroll${axis}`],\n    html[`client${axis}`],\n    html[`offset${axis}`],\n    html[`scroll${axis}`],\n    isIE(10)\n      ? (parseInt(html[`offset${axis}`]) + \n      parseInt(computedStyle[`margin${axis === 'Height' ? 'Top' : 'Left'}`]) + \n      parseInt(computedStyle[`margin${axis === 'Height' ? 'Bottom' : 'Right'}`]))\n    : 0 \n  );\n}\n\nexport default function getWindowSizes(document) {\n  const body = document.body;\n  const html = document.documentElement;\n  const computedStyle = isIE(10) && getComputedStyle(html);\n\n  return {\n    height: getSize('Height', body, html, computedStyle),\n    width: getSize('Width', body, html, computedStyle),\n  };\n}\n","/**\n * Given element offsets, generate an output similar to getBoundingClientRect\n * @method\n * @memberof Popper.Utils\n * @argument {Object} offsets\n * @returns {Object} ClientRect like output\n */\nexport default function getClientRect(offsets) {\n  return {\n    ...offsets,\n    right: offsets.left + offsets.width,\n    bottom: offsets.top + offsets.height,\n  };\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport getBordersSize from './getBordersSize';\nimport getWindowSizes from './getWindowSizes';\nimport getScroll from './getScroll';\nimport getClientRect from './getClientRect';\nimport isIE from './isIE';\n\n/**\n * Get bounding client rect of given element\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} element\n * @return {Object} client rect\n */\nexport default function getBoundingClientRect(element) {\n  let rect = {};\n\n  // IE10 10 FIX: Please, don't ask, the element isn't\n  // considered in DOM in some circumstances...\n  // This isn't reproducible in IE10 compatibility mode of IE11\n  try {\n    if (isIE(10)) {\n      rect = element.getBoundingClientRect();\n      const scrollTop = getScroll(element, 'top');\n      const scrollLeft = getScroll(element, 'left');\n      rect.top += scrollTop;\n      rect.left += scrollLeft;\n      rect.bottom += scrollTop;\n      rect.right += scrollLeft;\n    }\n    else {\n      rect = element.getBoundingClientRect();\n    }\n  }\n  catch(e){}\n\n  const result = {\n    left: rect.left,\n    top: rect.top,\n    width: rect.right - rect.left,\n    height: rect.bottom - rect.top,\n  };\n\n  // subtract scrollbar size from sizes\n  const sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};\n  const width =\n    sizes.width || element.clientWidth || result.width;\n  const height =\n    sizes.height || element.clientHeight || result.height;\n\n  let horizScrollbar = element.offsetWidth - width;\n  let vertScrollbar = element.offsetHeight - height;\n\n  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`\n  // we make this check conditional for performance reasons\n  if (horizScrollbar || vertScrollbar) {\n    const styles = getStyleComputedProperty(element);\n    horizScrollbar -= getBordersSize(styles, 'x');\n    vertScrollbar -= getBordersSize(styles, 'y');\n\n    result.width -= horizScrollbar;\n    result.height -= vertScrollbar;\n  }\n\n  return getClientRect(result);\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport includeScroll from './includeScroll';\nimport getScrollParent from './getScrollParent';\nimport getBoundingClientRect from './getBoundingClientRect';\nimport runIsIE from './isIE';\nimport getClientRect from './getClientRect';\n\nexport default function getOffsetRectRelativeToArbitraryNode(children, parent, fixedPosition = false) {\n  const isIE10 = runIsIE(10);\n  const isHTML = parent.nodeName === 'HTML';\n  const childrenRect = getBoundingClientRect(children);\n  const parentRect = getBoundingClientRect(parent);\n  const scrollParent = getScrollParent(children);\n\n  const styles = getStyleComputedProperty(parent);\n  const borderTopWidth = parseFloat(styles.borderTopWidth);\n  const borderLeftWidth = parseFloat(styles.borderLeftWidth);\n\n  // In cases where the parent is fixed, we must ignore negative scroll in offset calc\n  if(fixedPosition && isHTML) {\n    parentRect.top = Math.max(parentRect.top, 0);\n    parentRect.left = Math.max(parentRect.left, 0);\n  }\n  let offsets = getClientRect({\n    top: childrenRect.top - parentRect.top - borderTopWidth,\n    left: childrenRect.left - parentRect.left - borderLeftWidth,\n    width: childrenRect.width,\n    height: childrenRect.height,\n  });\n  offsets.marginTop = 0;\n  offsets.marginLeft = 0;\n\n  // Subtract margins of documentElement in case it's being used as parent\n  // we do this only on HTML because it's the only element that behaves\n  // differently when margins are applied to it. The margins are included in\n  // the box of the documentElement, in the other cases not.\n  if (!isIE10 && isHTML) {\n    const marginTop = parseFloat(styles.marginTop);\n    const marginLeft = parseFloat(styles.marginLeft);\n\n    offsets.top -= borderTopWidth - marginTop;\n    offsets.bottom -= borderTopWidth - marginTop;\n    offsets.left -= borderLeftWidth - marginLeft;\n    offsets.right -= borderLeftWidth - marginLeft;\n\n    // Attach marginTop and marginLeft because in some circumstances we may need them\n    offsets.marginTop = marginTop;\n    offsets.marginLeft = marginLeft;\n  }\n\n  if (\n    isIE10 && !fixedPosition\n      ? parent.contains(scrollParent)\n      : parent === scrollParent && scrollParent.nodeName !== 'BODY'\n  ) {\n    offsets = includeScroll(offsets, parent);\n  }\n\n  return offsets;\n}\n","import getScroll from './getScroll';\n\n/*\n * Sum or subtract the element scroll values (left and top) from a given rect object\n * @method\n * @memberof Popper.Utils\n * @param {Object} rect - Rect object you want to change\n * @param {HTMLElement} element - The element from the function reads the scroll values\n * @param {Boolean} subtract - set to true if you want to subtract the scroll values\n * @return {Object} rect - The modifier rect object\n */\nexport default function includeScroll(rect, element, subtract = false) {\n  const scrollTop = getScroll(element, 'top');\n  const scrollLeft = getScroll(element, 'left');\n  const modifier = subtract ? -1 : 1;\n  rect.top += scrollTop * modifier;\n  rect.bottom += scrollTop * modifier;\n  rect.left += scrollLeft * modifier;\n  rect.right += scrollLeft * modifier;\n  return rect;\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport getParentNode from './getParentNode';\n\n/**\n * Check if the given element is fixed or is inside a fixed parent\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {Element} customContainer\n * @returns {Boolean} answer to \"isFixed?\"\n */\nexport default function isFixed(element) {\n  const nodeName = element.nodeName;\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    return false;\n  }\n  if (getStyleComputedProperty(element, 'position') === 'fixed') {\n    return true;\n  }\n  const parentNode = getParentNode(element);\n  if (!parentNode) {\n    return false;\n  }\n  return isFixed(parentNode);\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport isIE from './isIE';\n/**\n * Finds the first parent of an element that has a transformed property defined\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} first transformed parent or documentElement\n */\n\nexport default function getFixedPositionOffsetParent(element) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n   if (!element || !element.parentElement || isIE()) {\n    return document.documentElement;\n  }\n  let el = element.parentElement;\n  while (el && getStyleComputedProperty(el, 'transform') === 'none') {\n    el = el.parentElement;\n  }\n  return el || document.documentElement;\n\n}\n","import getScrollParent from './getScrollParent';\nimport getParentNode from './getParentNode';\nimport getReferenceNode from './getReferenceNode';\nimport findCommonOffsetParent from './findCommonOffsetParent';\nimport getOffsetRectRelativeToArbitraryNode from './getOffsetRectRelativeToArbitraryNode';\nimport getViewportOffsetRectRelativeToArtbitraryNode from './getViewportOffsetRectRelativeToArtbitraryNode';\nimport getWindowSizes from './getWindowSizes';\nimport isFixed from './isFixed';\nimport getFixedPositionOffsetParent from './getFixedPositionOffsetParent';\n\n/**\n * Computed the boundaries limits and return them\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} popper\n * @param {HTMLElement} reference\n * @param {number} padding\n * @param {HTMLElement} boundariesElement - Element used to define the boundaries\n * @param {Boolean} fixedPosition - Is in fixed position mode\n * @returns {Object} Coordinates of the boundaries\n */\nexport default function getBoundaries(\n  popper,\n  reference,\n  padding,\n  boundariesElement,\n  fixedPosition = false\n) {\n  // NOTE: 1 DOM access here\n\n  let boundaries = { top: 0, left: 0 };\n  const offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));\n\n  // Handle viewport case\n  if (boundariesElement === 'viewport' ) {\n    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);\n  }\n\n  else {\n    // Handle other cases based on DOM element used as boundaries\n    let boundariesNode;\n    if (boundariesElement === 'scrollParent') {\n      boundariesNode = getScrollParent(getParentNode(reference));\n      if (boundariesNode.nodeName === 'BODY') {\n        boundariesNode = popper.ownerDocument.documentElement;\n      }\n    } else if (boundariesElement === 'window') {\n      boundariesNode = popper.ownerDocument.documentElement;\n    } else {\n      boundariesNode = boundariesElement;\n    }\n\n    const offsets = getOffsetRectRelativeToArbitraryNode(\n      boundariesNode,\n      offsetParent,\n      fixedPosition\n    );\n\n    // In case of HTML, we need a different computation\n    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {\n      const { height, width } = getWindowSizes(popper.ownerDocument);\n      boundaries.top += offsets.top - offsets.marginTop;\n      boundaries.bottom = height + offsets.top;\n      boundaries.left += offsets.left - offsets.marginLeft;\n      boundaries.right = width + offsets.left;\n    } else {\n      // for all the other DOM elements, this one is good\n      boundaries = offsets;\n    }\n  }\n\n  // Add paddings\n  padding = padding || 0;\n  const isPaddingNumber = typeof padding === 'number';\n  boundaries.left += isPaddingNumber ? padding : padding.left || 0; \n  boundaries.top += isPaddingNumber ? padding : padding.top || 0; \n  boundaries.right -= isPaddingNumber ? padding : padding.right || 0; \n  boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0; \n\n  return boundaries;\n}\n","import getOffsetRectRelativeToArbitraryNode from './getOffsetRectRelativeToArbitraryNode';\nimport getScroll from './getScroll';\nimport getClientRect from './getClientRect';\n\nexport default function getViewportOffsetRectRelativeToArtbitraryNode(element, excludeScroll = false) {\n  const html = element.ownerDocument.documentElement;\n  const relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);\n  const width = Math.max(html.clientWidth, window.innerWidth || 0);\n  const height = Math.max(html.clientHeight, window.innerHeight || 0);\n\n  const scrollTop = !excludeScroll ? getScroll(html) : 0;\n  const scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;\n\n  const offset = {\n    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,\n    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,\n    width,\n    height,\n  };\n\n  return getClientRect(offset);\n}\n","import getBoundaries from '../utils/getBoundaries';\n\nfunction getArea({ width, height }) {\n  return width * height;\n}\n\n/**\n * Utility used to transform the `auto` placement to the placement with more\n * available space.\n * @method\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function computeAutoPlacement(\n  placement,\n  refRect,\n  popper,\n  reference,\n  boundariesElement,\n  padding = 0\n) {\n  if (placement.indexOf('auto') === -1) {\n    return placement;\n  }\n\n  const boundaries = getBoundaries(\n    popper,\n    reference,\n    padding,\n    boundariesElement\n  );\n\n  const rects = {\n    top: {\n      width: boundaries.width,\n      height: refRect.top - boundaries.top,\n    },\n    right: {\n      width: boundaries.right - refRect.right,\n      height: boundaries.height,\n    },\n    bottom: {\n      width: boundaries.width,\n      height: boundaries.bottom - refRect.bottom,\n    },\n    left: {\n      width: refRect.left - boundaries.left,\n      height: boundaries.height,\n    },\n  };\n\n  const sortedAreas = Object.keys(rects)\n    .map(key => ({\n      key,\n      ...rects[key],\n      area: getArea(rects[key]),\n    }))\n    .sort((a, b) => b.area - a.area);\n\n  const filteredAreas = sortedAreas.filter(\n    ({ width, height }) =>\n      width >= popper.clientWidth && height >= popper.clientHeight\n  );\n\n  const computedPlacement = filteredAreas.length > 0\n    ? filteredAreas[0].key\n    : sortedAreas[0].key;\n\n  const variation = placement.split('-')[1];\n\n  return computedPlacement + (variation ? `-${variation}` : '');\n}\n","import findCommonOffsetParent from './findCommonOffsetParent';\nimport getOffsetRectRelativeToArbitraryNode from './getOffsetRectRelativeToArbitraryNode';\nimport getFixedPositionOffsetParent from './getFixedPositionOffsetParent';\nimport getReferenceNode from './getReferenceNode';\n\n/**\n * Get offsets to the reference element\n * @method\n * @memberof Popper.Utils\n * @param {Object} state\n * @param {Element} popper - the popper element\n * @param {Element} reference - the reference element (the popper will be relative to this)\n * @param {Element} fixedPosition - is in fixed position mode\n * @returns {Object} An object containing the offsets which will be applied to the popper\n */\nexport default function getReferenceOffsets(state, popper, reference, fixedPosition = null) {\n  const commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));\n  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);\n}\n","/**\n * Get the outer sizes of the given element (offset size + margins)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Object} object containing width and height properties\n */\nexport default function getOuterSizes(element) {\n  const window = element.ownerDocument.defaultView;\n  const styles = window.getComputedStyle(element);\n  const x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);\n  const y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);\n  const result = {\n    width: element.offsetWidth + y,\n    height: element.offsetHeight + x,\n  };\n  return result;\n}\n","/**\n * Get the opposite placement of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement\n * @returns {String} flipped placement\n */\nexport default function getOppositePlacement(placement) {\n  const hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };\n  return placement.replace(/left|right|bottom|top/g, matched => hash[matched]);\n}\n","import getOuterSizes from './getOuterSizes';\nimport getOppositePlacement from './getOppositePlacement';\n\n/**\n * Get offsets to the popper\n * @method\n * @memberof Popper.Utils\n * @param {Object} position - CSS position the Popper will get applied\n * @param {HTMLElement} popper - the popper element\n * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)\n * @param {String} placement - one of the valid placement options\n * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper\n */\nexport default function getPopperOffsets(popper, referenceOffsets, placement) {\n  placement = placement.split('-')[0];\n\n  // Get popper node sizes\n  const popperRect = getOuterSizes(popper);\n\n  // Add position, width and height to our offsets object\n  const popperOffsets = {\n    width: popperRect.width,\n    height: popperRect.height,\n  };\n\n  // depending by the popper placement we have to compute its offsets slightly differently\n  const isHoriz = ['right', 'left'].indexOf(placement) !== -1;\n  const mainSide = isHoriz ? 'top' : 'left';\n  const secondarySide = isHoriz ? 'left' : 'top';\n  const measurement = isHoriz ? 'height' : 'width';\n  const secondaryMeasurement = !isHoriz ? 'height' : 'width';\n\n  popperOffsets[mainSide] =\n    referenceOffsets[mainSide] +\n    referenceOffsets[measurement] / 2 -\n    popperRect[measurement] / 2;\n  if (placement === secondarySide) {\n    popperOffsets[secondarySide] =\n      referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];\n  } else {\n    popperOffsets[secondarySide] =\n      referenceOffsets[getOppositePlacement(secondarySide)];\n  }\n\n  return popperOffsets;\n}\n","/**\n * Mimics the `find` method of Array\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nexport default function find(arr, check) {\n  // use native find if supported\n  if (Array.prototype.find) {\n    return arr.find(check);\n  }\n\n  // use `filter` to obtain the same behavior of `find`\n  return arr.filter(check)[0];\n}\n","import isFunction from './isFunction';\nimport findIndex from './findIndex';\nimport getClientRect from '../utils/getClientRect';\n\n/**\n * Loop trough the list of modifiers and run them in order,\n * each of them will then edit the data object.\n * @method\n * @memberof Popper.Utils\n * @param {dataObject} data\n * @param {Array} modifiers\n * @param {String} ends - Optional modifier name used as stopper\n * @returns {dataObject}\n */\nexport default function runModifiers(modifiers, data, ends) {\n  const modifiersToRun = ends === undefined\n    ? modifiers\n    : modifiers.slice(0, findIndex(modifiers, 'name', ends));\n\n  modifiersToRun.forEach(modifier => {\n    if (modifier['function']) { // eslint-disable-line dot-notation\n      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');\n    }\n    const fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation\n    if (modifier.enabled && isFunction(fn)) {\n      // Add properties to offsets to make them a complete clientRect object\n      // we do this before each modifier to make sure the previous one doesn't\n      // mess with these values\n      data.offsets.popper = getClientRect(data.offsets.popper);\n      data.offsets.reference = getClientRect(data.offsets.reference);\n\n      data = fn(data, modifier);\n    }\n  });\n\n  return data;\n}\n","import find from './find';\n\n/**\n * Return the index of the matching object\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nexport default function findIndex(arr, prop, value) {\n  // use native findIndex if supported\n  if (Array.prototype.findIndex) {\n    return arr.findIndex(cur => cur[prop] === value);\n  }\n\n  // use `find` + `indexOf` if `findIndex` isn't supported\n  const match = find(arr, obj => obj[prop] === value);\n  return arr.indexOf(match);\n}\n","import computeAutoPlacement from '../utils/computeAutoPlacement';\nimport getReferenceOffsets from '../utils/getReferenceOffsets';\nimport getPopperOffsets from '../utils/getPopperOffsets';\nimport runModifiers from '../utils/runModifiers';\n\n/**\n * Updates the position of the popper, computing the new offsets and applying\n * the new style.<br />\n * Prefer `scheduleUpdate` over `update` because of performance reasons.\n * @method\n * @memberof Popper\n */\nexport default function update() {\n  // if popper is destroyed, don't perform any further update\n  if (this.state.isDestroyed) {\n    return;\n  }\n\n  let data = {\n    instance: this,\n    styles: {},\n    arrowStyles: {},\n    attributes: {},\n    flipped: false,\n    offsets: {},\n  };\n\n  // compute reference element offsets\n  data.offsets.reference = getReferenceOffsets(\n    this.state,\n    this.popper,\n    this.reference,\n    this.options.positionFixed\n  );\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  data.placement = computeAutoPlacement(\n    this.options.placement,\n    data.offsets.reference,\n    this.popper,\n    this.reference,\n    this.options.modifiers.flip.boundariesElement,\n    this.options.modifiers.flip.padding\n  );\n\n  // store the computed placement inside `originalPlacement`\n  data.originalPlacement = data.placement;\n\n  data.positionFixed = this.options.positionFixed;\n\n  // compute the popper offsets\n  data.offsets.popper = getPopperOffsets(\n    this.popper,\n    data.offsets.reference,\n    data.placement\n  );\n\n  data.offsets.popper.position = this.options.positionFixed\n    ? 'fixed'\n    : 'absolute';\n\n  // run the modifiers\n  data = runModifiers(this.modifiers, data);\n\n  // the first `update` will call `onCreate` callback\n  // the other ones will call `onUpdate` callback\n  if (!this.state.isCreated) {\n    this.state.isCreated = true;\n    this.options.onCreate(data);\n  } else {\n    this.options.onUpdate(data);\n  }\n}\n","/**\n * Helper used to know if the given modifier is enabled.\n * @method\n * @memberof Popper.Utils\n * @returns {Boolean}\n */\nexport default function isModifierEnabled(modifiers, modifierName) {\n  return modifiers.some(\n    ({ name, enabled }) => enabled && name === modifierName\n  );\n}\n","/**\n * Get the prefixed supported property name\n * @method\n * @memberof Popper.Utils\n * @argument {String} property (camelCase)\n * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)\n */\nexport default function getSupportedPropertyName(property) {\n  const prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];\n  const upperProp = property.charAt(0).toUpperCase() + property.slice(1);\n\n  for (let i = 0; i < prefixes.length; i++) {\n    const prefix = prefixes[i];\n    const toCheck = prefix ? `${prefix}${upperProp}` : property;\n    if (typeof document.body.style[toCheck] !== 'undefined') {\n      return toCheck;\n    }\n  }\n  return null;\n}\n","import isModifierEnabled from '../utils/isModifierEnabled';\nimport getSupportedPropertyName from '../utils/getSupportedPropertyName';\n\n/**\n * Destroys the popper.\n * @method\n * @memberof Popper\n */\nexport default function destroy() {\n  this.state.isDestroyed = true;\n\n  // touch DOM only if `applyStyle` modifier is enabled\n  if (isModifierEnabled(this.modifiers, 'applyStyle')) {\n    this.popper.removeAttribute('x-placement');\n    this.popper.style.position = '';\n    this.popper.style.top = '';\n    this.popper.style.left = '';\n    this.popper.style.right = '';\n    this.popper.style.bottom = '';\n    this.popper.style.willChange = '';\n    this.popper.style[getSupportedPropertyName('transform')] = '';\n  }\n\n  this.disableEventListeners();\n\n  // remove the popper if user explicitly asked for the deletion on destroy\n  // do not use `remove` because IE11 doesn't support it\n  if (this.options.removeOnDestroy) {\n    this.popper.parentNode.removeChild(this.popper);\n  }\n  return this;\n}\n","/**\n * Get the window associated with the element\n * @argument {Element} element\n * @returns {Window}\n */\nexport default function getWindow(element) {\n  const ownerDocument = element.ownerDocument;\n  return ownerDocument ? ownerDocument.defaultView : window;\n}\n","import getScrollParent from './getScrollParent';\nimport getWindow from './getWindow';\n\nfunction attachToScrollParents(scrollParent, event, callback, scrollParents) {\n  const isBody = scrollParent.nodeName === 'BODY';\n  const target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;\n  target.addEventListener(event, callback, { passive: true });\n\n  if (!isBody) {\n    attachToScrollParents(\n      getScrollParent(target.parentNode),\n      event,\n      callback,\n      scrollParents\n    );\n  }\n  scrollParents.push(target);\n}\n\n/**\n * Setup needed event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nexport default function setupEventListeners(\n  reference,\n  options,\n  state,\n  updateBound\n) {\n  // Resize event listener on window\n  state.updateBound = updateBound;\n  getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });\n\n  // Scroll event listener on scroll parents\n  const scrollElement = getScrollParent(reference);\n  attachToScrollParents(\n    scrollElement,\n    'scroll',\n    state.updateBound,\n    state.scrollParents\n  );\n  state.scrollElement = scrollElement;\n  state.eventsEnabled = true;\n\n  return state;\n}\n","import setupEventListeners from '../utils/setupEventListeners';\n\n/**\n * It will add resize/scroll events and start recalculating\n * position of the popper element when they are triggered.\n * @method\n * @memberof Popper\n */\nexport default function enableEventListeners() {\n  if (!this.state.eventsEnabled) {\n    this.state = setupEventListeners(\n      this.reference,\n      this.options,\n      this.state,\n      this.scheduleUpdate\n    );\n  }\n}\n","import removeEventListeners from '../utils/removeEventListeners';\n\n/**\n * It will remove resize/scroll events and won't recalculate popper position\n * when they are triggered. It also won't trigger `onUpdate` callback anymore,\n * unless you call `update` method manually.\n * @method\n * @memberof Popper\n */\nexport default function disableEventListeners() {\n  if (this.state.eventsEnabled) {\n    cancelAnimationFrame(this.scheduleUpdate);\n    this.state = removeEventListeners(this.reference, this.state);\n  }\n}\n","import getWindow from './getWindow';\n\n/**\n * Remove event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nexport default function removeEventListeners(reference, state) {\n  // Remove resize event listener on window\n  getWindow(reference).removeEventListener('resize', state.updateBound);\n\n  // Remove scroll event listener on scroll parents\n  state.scrollParents.forEach(target => {\n    target.removeEventListener('scroll', state.updateBound);\n  });\n\n  // Reset state\n  state.updateBound = null;\n  state.scrollParents = [];\n  state.scrollElement = null;\n  state.eventsEnabled = false;\n  return state;\n}\n","/**\n * Tells if a given input is a number\n * @method\n * @memberof Popper.Utils\n * @param {*} input to check\n * @return {Boolean}\n */\nexport default function isNumeric(n) {\n  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);\n}\n","import isNumeric from './isNumeric';\n\n/**\n * Set the style to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the style to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nexport default function setStyles(element, styles) {\n  Object.keys(styles).forEach(prop => {\n    let unit = '';\n    // add unit if the value is numeric and is one of the following\n    if (\n      ['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !==\n        -1 &&\n      isNumeric(styles[prop])\n    ) {\n      unit = 'px';\n    }\n    element.style[prop] = styles[prop] + unit;\n  });\n}\n","import getSupportedPropertyName from '../utils/getSupportedPropertyName';\nimport find from '../utils/find';\nimport getOffsetParent from '../utils/getOffsetParent';\nimport getBoundingClientRect from '../utils/getBoundingClientRect';\nimport getRoundedOffsets from '../utils/getRoundedOffsets';\nimport isBrowser from '../utils/isBrowser';\n\nconst isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function computeStyle(data, options) {\n  const { x, y } = options;\n  const { popper } = data.offsets;\n\n  // Remove this legacy support in Popper.js v2\n  const legacyGpuAccelerationOption = find(\n    data.instance.modifiers,\n    modifier => modifier.name === 'applyStyle'\n  ).gpuAcceleration;\n  if (legacyGpuAccelerationOption !== undefined) {\n    console.warn(\n      'WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!'\n    );\n  }\n  const gpuAcceleration =\n    legacyGpuAccelerationOption !== undefined\n      ? legacyGpuAccelerationOption\n      : options.gpuAcceleration;\n\n  const offsetParent = getOffsetParent(data.instance.popper);\n  const offsetParentRect = getBoundingClientRect(offsetParent);\n\n  // Styles\n  const styles = {\n    position: popper.position,\n  };\n\n  const offsets = getRoundedOffsets(\n    data,\n    window.devicePixelRatio < 2 || !isFirefox\n  );\n\n  const sideA = x === 'bottom' ? 'top' : 'bottom';\n  const sideB = y === 'right' ? 'left' : 'right';\n\n  // if gpuAcceleration is set to `true` and transform is supported,\n  //  we use `translate3d` to apply the position to the popper we\n  // automatically use the supported prefixed version if needed\n  const prefixedProperty = getSupportedPropertyName('transform');\n\n  // now, let's make a step back and look at this code closely (wtf?)\n  // If the content of the popper grows once it's been positioned, it\n  // may happen that the popper gets misplaced because of the new content\n  // overflowing its reference element\n  // To avoid this problem, we provide two options (x and y), which allow\n  // the consumer to define the offset origin.\n  // If we position a popper on top of a reference element, we can set\n  // `x` to `top` to make the popper grow towards its top instead of\n  // its bottom.\n  let left, top;\n  if (sideA === 'bottom') {\n    // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)\n    // and not the bottom of the html element\n    if (offsetParent.nodeName === 'HTML') {\n      top = -offsetParent.clientHeight + offsets.bottom;\n    } else {\n      top = -offsetParentRect.height + offsets.bottom;\n    }\n  } else {\n    top = offsets.top;\n  }\n  if (sideB === 'right') {\n    if (offsetParent.nodeName === 'HTML') {\n      left = -offsetParent.clientWidth + offsets.right;\n    } else {\n      left = -offsetParentRect.width + offsets.right;\n    }\n  } else {\n    left = offsets.left;\n  }\n  if (gpuAcceleration && prefixedProperty) {\n    styles[prefixedProperty] = `translate3d(${left}px, ${top}px, 0)`;\n    styles[sideA] = 0;\n    styles[sideB] = 0;\n    styles.willChange = 'transform';\n  } else {\n    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties\n    const invertTop = sideA === 'bottom' ? -1 : 1;\n    const invertLeft = sideB === 'right' ? -1 : 1;\n    styles[sideA] = top * invertTop;\n    styles[sideB] = left * invertLeft;\n    styles.willChange = `${sideA}, ${sideB}`;\n  }\n\n  // Attributes\n  const attributes = {\n    'x-placement': data.placement,\n  };\n\n  // Update `data` attributes, styles and arrowStyles\n  data.attributes = { ...attributes, ...data.attributes };\n  data.styles = { ...styles, ...data.styles };\n  data.arrowStyles = { ...data.offsets.arrow, ...data.arrowStyles };\n\n  return data;\n}\n","import find from './find';\n\n/**\n * Helper used to know if the given modifier depends from another one.<br />\n * It checks if the needed modifier is listed and enabled.\n * @method\n * @memberof Popper.Utils\n * @param {Array} modifiers - list of modifiers\n * @param {String} requestingName - name of requesting modifier\n * @param {String} requestedName - name of requested modifier\n * @returns {Boolean}\n */\nexport default function isModifierRequired(\n  modifiers,\n  requestingName,\n  requestedName\n) {\n  const requesting = find(modifiers, ({ name }) => name === requestingName);\n\n  const isRequired =\n    !!requesting &&\n    modifiers.some(modifier => {\n      return (\n        modifier.name === requestedName &&\n        modifier.enabled &&\n        modifier.order < requesting.order\n      );\n    });\n\n  if (!isRequired) {\n    const requesting = `\\`${requestingName}\\``;\n    const requested = `\\`${requestedName}\\``;\n    console.warn(\n      `${requested} modifier is required by ${requesting} modifier in order to work, be sure to include it before ${requesting}!`\n    );\n  }\n  return isRequired;\n}\n","/**\n * List of accepted placements to use as values of the `placement` option.<br />\n * Valid placements are:\n * - `auto`\n * - `top`\n * - `right`\n * - `bottom`\n * - `left`\n *\n * Each placement can have a variation from this list:\n * - `-start`\n * - `-end`\n *\n * Variations are interpreted easily if you think of them as the left to right\n * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`\n * is right.<br />\n * Vertically (`left` and `right`), `start` is top and `end` is bottom.\n *\n * Some valid examples are:\n * - `top-end` (on top of reference, right aligned)\n * - `right-start` (on right of reference, top aligned)\n * - `bottom` (on bottom, centered)\n * - `auto-end` (on the side with more space available, alignment depends by placement)\n *\n * @static\n * @type {Array}\n * @enum {String}\n * @readonly\n * @method placements\n * @memberof Popper\n */\nexport default [\n  'auto-start',\n  'auto',\n  'auto-end',\n  'top-start',\n  'top',\n  'top-end',\n  'right-start',\n  'right',\n  'right-end',\n  'bottom-end',\n  'bottom',\n  'bottom-start',\n  'left-end',\n  'left',\n  'left-start',\n];\n","import placements from '../methods/placements';\n\n// Get rid of `auto` `auto-start` and `auto-end`\nconst validPlacements = placements.slice(3);\n\n/**\n * Given an initial placement, returns all the subsequent placements\n * clockwise (or counter-clockwise).\n *\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement - A valid placement (it accepts variations)\n * @argument {Boolean} counter - Set to true to walk the placements counterclockwise\n * @returns {Array} placements including their variations\n */\nexport default function clockwise(placement, counter = false) {\n  const index = validPlacements.indexOf(placement);\n  const arr = validPlacements\n    .slice(index + 1)\n    .concat(validPlacements.slice(0, index));\n  return counter ? arr.reverse() : arr;\n}\n","import getOppositePlacement from '../utils/getOppositePlacement';\nimport getOppositeVariation from '../utils/getOppositeVariation';\nimport getPopperOffsets from '../utils/getPopperOffsets';\nimport runModifiers from '../utils/runModifiers';\nimport getBoundaries from '../utils/getBoundaries';\nimport isModifierEnabled from '../utils/isModifierEnabled';\nimport clockwise from '../utils/clockwise';\n\nconst BEHAVIORS = {\n  FLIP: 'flip',\n  CLOCKWISE: 'clockwise',\n  COUNTERCLOCKWISE: 'counterclockwise',\n};\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function flip(data, options) {\n  // if `inner` modifier is enabled, we can't use the `flip` modifier\n  if (isModifierEnabled(data.instance.modifiers, 'inner')) {\n    return data;\n  }\n\n  if (data.flipped && data.placement === data.originalPlacement) {\n    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides\n    return data;\n  }\n\n  const boundaries = getBoundaries(\n    data.instance.popper,\n    data.instance.reference,\n    options.padding,\n    options.boundariesElement,\n    data.positionFixed\n  );\n\n  let placement = data.placement.split('-')[0];\n  let placementOpposite = getOppositePlacement(placement);\n  let variation = data.placement.split('-')[1] || '';\n\n  let flipOrder = [];\n\n  switch (options.behavior) {\n    case BEHAVIORS.FLIP:\n      flipOrder = [placement, placementOpposite];\n      break;\n    case BEHAVIORS.CLOCKWISE:\n      flipOrder = clockwise(placement);\n      break;\n    case BEHAVIORS.COUNTERCLOCKWISE:\n      flipOrder = clockwise(placement, true);\n      break;\n    default:\n      flipOrder = options.behavior;\n  }\n\n  flipOrder.forEach((step, index) => {\n    if (placement !== step || flipOrder.length === index + 1) {\n      return data;\n    }\n\n    placement = data.placement.split('-')[0];\n    placementOpposite = getOppositePlacement(placement);\n\n    const popperOffsets = data.offsets.popper;\n    const refOffsets = data.offsets.reference;\n\n    // using floor because the reference offsets may contain decimals we are not going to consider here\n    const floor = Math.floor;\n    const overlapsRef =\n      (placement === 'left' &&\n        floor(popperOffsets.right) > floor(refOffsets.left)) ||\n      (placement === 'right' &&\n        floor(popperOffsets.left) < floor(refOffsets.right)) ||\n      (placement === 'top' &&\n        floor(popperOffsets.bottom) > floor(refOffsets.top)) ||\n      (placement === 'bottom' &&\n        floor(popperOffsets.top) < floor(refOffsets.bottom));\n\n    const overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);\n    const overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);\n    const overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);\n    const overflowsBottom =\n      floor(popperOffsets.bottom) > floor(boundaries.bottom);\n\n    const overflowsBoundaries =\n      (placement === 'left' && overflowsLeft) ||\n      (placement === 'right' && overflowsRight) ||\n      (placement === 'top' && overflowsTop) ||\n      (placement === 'bottom' && overflowsBottom);\n\n    // flip the variation if required\n    const isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n\n    // flips variation if reference element overflows boundaries\n    const flippedVariationByRef =\n      !!options.flipVariations &&\n      ((isVertical && variation === 'start' && overflowsLeft) ||\n        (isVertical && variation === 'end' && overflowsRight) ||\n        (!isVertical && variation === 'start' && overflowsTop) ||\n        (!isVertical && variation === 'end' && overflowsBottom));\n\n    // flips variation if popper content overflows boundaries\n    const flippedVariationByContent =\n      !!options.flipVariationsByContent &&\n      ((isVertical && variation === 'start' && overflowsRight) ||\n        (isVertical && variation === 'end' && overflowsLeft) ||\n        (!isVertical && variation === 'start' && overflowsBottom) ||\n        (!isVertical && variation === 'end' && overflowsTop));\n\n    const flippedVariation = flippedVariationByRef || flippedVariationByContent;\n\n    if (overlapsRef || overflowsBoundaries || flippedVariation) {\n      // this boolean to detect any flip loop\n      data.flipped = true;\n\n      if (overlapsRef || overflowsBoundaries) {\n        placement = flipOrder[index + 1];\n      }\n\n      if (flippedVariation) {\n        variation = getOppositeVariation(variation);\n      }\n\n      data.placement = placement + (variation ? '-' + variation : '');\n\n      // this object contains `position`, we want to preserve it along with\n      // any additional property we may add in the future\n      data.offsets.popper = {\n        ...data.offsets.popper,\n        ...getPopperOffsets(\n          data.instance.popper,\n          data.offsets.reference,\n          data.placement\n        ),\n      };\n\n      data = runModifiers(data.instance.modifiers, data, 'flip');\n    }\n  });\n  return data;\n}\n","import isNumeric from '../utils/isNumeric';\nimport getClientRect from '../utils/getClientRect';\nimport find from '../utils/find';\n\n/**\n * Converts a string containing value + unit into a px value number\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} str - Value + unit string\n * @argument {String} measurement - `height` or `width`\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @returns {Number|String}\n * Value in pixels, or original string if no values were extracted\n */\nexport function toValue(str, measurement, popperOffsets, referenceOffsets) {\n  // separate value from unit\n  const split = str.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/);\n  const value = +split[1];\n  const unit = split[2];\n\n  // If it's not a number it's an operator, I guess\n  if (!value) {\n    return str;\n  }\n\n  if (unit.indexOf('%') === 0) {\n    let element;\n    switch (unit) {\n      case '%p':\n        element = popperOffsets;\n        break;\n      case '%':\n      case '%r':\n      default:\n        element = referenceOffsets;\n    }\n\n    const rect = getClientRect(element);\n    return rect[measurement] / 100 * value;\n  } else if (unit === 'vh' || unit === 'vw') {\n    // if is a vh or vw, we calculate the size based on the viewport\n    let size;\n    if (unit === 'vh') {\n      size = Math.max(\n        document.documentElement.clientHeight,\n        window.innerHeight || 0\n      );\n    } else {\n      size = Math.max(\n        document.documentElement.clientWidth,\n        window.innerWidth || 0\n      );\n    }\n    return size / 100 * value;\n  } else {\n    // if is an explicit pixel unit, we get rid of the unit and keep the value\n    // if is an implicit unit, it's px, and we return just the value\n    return value;\n  }\n}\n\n/**\n * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} offset\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @argument {String} basePlacement\n * @returns {Array} a two cells array with x and y offsets in numbers\n */\nexport function parseOffset(\n  offset,\n  popperOffsets,\n  referenceOffsets,\n  basePlacement\n) {\n  const offsets = [0, 0];\n\n  // Use height if placement is left or right and index is 0 otherwise use width\n  // in this way the first offset will use an axis and the second one\n  // will use the other one\n  const useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;\n\n  // Split the offset string to obtain a list of values and operands\n  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)\n  const fragments = offset.split(/(\\+|\\-)/).map(frag => frag.trim());\n\n  // Detect if the offset string contains a pair of values or a single one\n  // they could be separated by comma or space\n  const divider = fragments.indexOf(\n    find(fragments, frag => frag.search(/,|\\s/) !== -1)\n  );\n\n  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {\n    console.warn(\n      'Offsets separated by white space(s) are deprecated, use a comma (,) instead.'\n    );\n  }\n\n  // If divider is found, we divide the list of values and operands to divide\n  // them by ofset X and Y.\n  const splitRegex = /\\s*,\\s*|\\s+/;\n  let ops = divider !== -1\n    ? [\n        fragments\n          .slice(0, divider)\n          .concat([fragments[divider].split(splitRegex)[0]]),\n        [fragments[divider].split(splitRegex)[1]].concat(\n          fragments.slice(divider + 1)\n        ),\n      ]\n    : [fragments];\n\n  // Convert the values with units to absolute pixels to allow our computations\n  ops = ops.map((op, index) => {\n    // Most of the units rely on the orientation of the popper\n    const measurement = (index === 1 ? !useHeight : useHeight)\n      ? 'height'\n      : 'width';\n    let mergeWithPrevious = false;\n    return (\n      op\n        // This aggregates any `+` or `-` sign that aren't considered operators\n        // e.g.: 10 + +5 => [10, +, +5]\n        .reduce((a, b) => {\n          if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {\n            a[a.length - 1] = b;\n            mergeWithPrevious = true;\n            return a;\n          } else if (mergeWithPrevious) {\n            a[a.length - 1] += b;\n            mergeWithPrevious = false;\n            return a;\n          } else {\n            return a.concat(b);\n          }\n        }, [])\n        // Here we convert the string values into number values (in px)\n        .map(str => toValue(str, measurement, popperOffsets, referenceOffsets))\n    );\n  });\n\n  // Loop trough the offsets arrays and execute the operations\n  ops.forEach((op, index) => {\n    op.forEach((frag, index2) => {\n      if (isNumeric(frag)) {\n        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);\n      }\n    });\n  });\n  return offsets;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @argument {Number|String} options.offset=0\n * The offset value as described in the modifier description\n * @returns {Object} The data object, properly modified\n */\nexport default function offset(data, { offset }) {\n  const { placement, offsets: { popper, reference } } = data;\n  const basePlacement = placement.split('-')[0];\n\n  let offsets;\n  if (isNumeric(+offset)) {\n    offsets = [+offset, 0];\n  } else {\n    offsets = parseOffset(offset, popper, reference, basePlacement);\n  }\n\n  if (basePlacement === 'left') {\n    popper.top += offsets[0];\n    popper.left -= offsets[1];\n  } else if (basePlacement === 'right') {\n    popper.top += offsets[0];\n    popper.left += offsets[1];\n  } else if (basePlacement === 'top') {\n    popper.left += offsets[0];\n    popper.top -= offsets[1];\n  } else if (basePlacement === 'bottom') {\n    popper.left += offsets[0];\n    popper.top += offsets[1];\n  }\n\n  data.popper = popper;\n  return data;\n}\n","import applyStyle, { applyStyleOnLoad } from './applyStyle';\nimport computeStyle from './computeStyle';\nimport arrow from './arrow';\nimport flip from './flip';\nimport keepTogether from './keepTogether';\nimport offset from './offset';\nimport preventOverflow from './preventOverflow';\nimport shift from './shift';\nimport hide from './hide';\nimport inner from './inner';\n\n/**\n * Modifier function, each modifier can have a function of this type assigned\n * to its `fn` property.<br />\n * These functions will be called on each update, this means that you must\n * make sure they are performant enough to avoid performance bottlenecks.\n *\n * @function ModifierFn\n * @argument {dataObject} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {dataObject} The data object, properly modified\n */\n\n/**\n * Modifiers are plugins used to alter the behavior of your poppers.<br />\n * Popper.js uses a set of 9 modifiers to provide all the basic functionalities\n * needed by the library.\n *\n * Usually you don't want to override the `order`, `fn` and `onLoad` props.\n * All the other properties are configurations that could be tweaked.\n * @namespace modifiers\n */\nexport default {\n  /**\n   * Modifier used to shift the popper on the start or end of its reference\n   * element.<br />\n   * It will read the variation of the `placement` property.<br />\n   * It can be one either `-end` or `-start`.\n   * @memberof modifiers\n   * @inner\n   */\n  shift: {\n    /** @prop {number} order=100 - Index used to define the order of execution */\n    order: 100,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: shift,\n  },\n\n  /**\n   * The `offset` modifier can shift your popper on both its axis.\n   *\n   * It accepts the following units:\n   * - `px` or unit-less, interpreted as pixels\n   * - `%` or `%r`, percentage relative to the length of the reference element\n   * - `%p`, percentage relative to the length of the popper element\n   * - `vw`, CSS viewport width unit\n   * - `vh`, CSS viewport height unit\n   *\n   * For length is intended the main axis relative to the placement of the popper.<br />\n   * This means that if the placement is `top` or `bottom`, the length will be the\n   * `width`. In case of `left` or `right`, it will be the `height`.\n   *\n   * You can provide a single value (as `Number` or `String`), or a pair of values\n   * as `String` divided by a comma or one (or more) white spaces.<br />\n   * The latter is a deprecated method because it leads to confusion and will be\n   * removed in v2.<br />\n   * Additionally, it accepts additions and subtractions between different units.\n   * Note that multiplications and divisions aren't supported.\n   *\n   * Valid examples are:\n   * ```\n   * 10\n   * '10%'\n   * '10, 10'\n   * '10%, 10'\n   * '10 + 10%'\n   * '10 - 5vh + 3%'\n   * '-10px + 5vh, 5px - 6%'\n   * ```\n   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap\n   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.\n   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  offset: {\n    /** @prop {number} order=200 - Index used to define the order of execution */\n    order: 200,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: offset,\n    /** @prop {Number|String} offset=0\n     * The offset value as described in the modifier description\n     */\n    offset: 0,\n  },\n\n  /**\n   * Modifier used to prevent the popper from being positioned outside the boundary.\n   *\n   * A scenario exists where the reference itself is not within the boundaries.<br />\n   * We can say it has \"escaped the boundaries\" — or just \"escaped\".<br />\n   * In this case we need to decide whether the popper should either:\n   *\n   * - detach from the reference and remain \"trapped\" in the boundaries, or\n   * - if it should ignore the boundary and \"escape with its reference\"\n   *\n   * When `escapeWithReference` is set to`true` and reference is completely\n   * outside its boundaries, the popper will overflow (or completely leave)\n   * the boundaries in order to remain attached to the edge of the reference.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  preventOverflow: {\n    /** @prop {number} order=300 - Index used to define the order of execution */\n    order: 300,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: preventOverflow,\n    /**\n     * @prop {Array} [priority=['left','right','top','bottom']]\n     * Popper will try to prevent overflow following these priorities by default,\n     * then, it could overflow on the left and on top of the `boundariesElement`\n     */\n    priority: ['left', 'right', 'top', 'bottom'],\n    /**\n     * @prop {number} padding=5\n     * Amount of pixel used to define a minimum distance between the boundaries\n     * and the popper. This makes sure the popper always has a little padding\n     * between the edges of its container\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='scrollParent'\n     * Boundaries used by the modifier. Can be `scrollParent`, `window`,\n     * `viewport` or any DOM element.\n     */\n    boundariesElement: 'scrollParent',\n  },\n\n  /**\n   * Modifier used to make sure the reference and its popper stay near each other\n   * without leaving any gap between the two. Especially useful when the arrow is\n   * enabled and you want to ensure that it points to its reference element.\n   * It cares only about the first axis. You can still have poppers with margin\n   * between the popper and its reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  keepTogether: {\n    /** @prop {number} order=400 - Index used to define the order of execution */\n    order: 400,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: keepTogether,\n  },\n\n  /**\n   * This modifier is used to move the `arrowElement` of the popper to make\n   * sure it is positioned between the reference element and its popper element.\n   * It will read the outer size of the `arrowElement` node to detect how many\n   * pixels of conjunction are needed.\n   *\n   * It has no effect if no `arrowElement` is provided.\n   * @memberof modifiers\n   * @inner\n   */\n  arrow: {\n    /** @prop {number} order=500 - Index used to define the order of execution */\n    order: 500,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: arrow,\n    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */\n    element: '[x-arrow]',\n  },\n\n  /**\n   * Modifier used to flip the popper's placement when it starts to overlap its\n   * reference element.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   *\n   * **NOTE:** this modifier will interrupt the current update cycle and will\n   * restart it if it detects the need to flip the placement.\n   * @memberof modifiers\n   * @inner\n   */\n  flip: {\n    /** @prop {number} order=600 - Index used to define the order of execution */\n    order: 600,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: flip,\n    /**\n     * @prop {String|Array} behavior='flip'\n     * The behavior used to change the popper's placement. It can be one of\n     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid\n     * placements (with optional variations)\n     */\n    behavior: 'flip',\n    /**\n     * @prop {number} padding=5\n     * The popper will flip if it hits the edges of the `boundariesElement`\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='viewport'\n     * The element which will define the boundaries of the popper position.\n     * The popper will never be placed outside of the defined boundaries\n     * (except if `keepTogether` is enabled)\n     */\n    boundariesElement: 'viewport',\n    /**\n     * @prop {Boolean} flipVariations=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the reference element overlaps its boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariations: false,\n    /**\n     * @prop {Boolean} flipVariationsByContent=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the popper element overlaps its reference boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariationsByContent: false,\n  },\n\n  /**\n   * Modifier used to make the popper flow toward the inner of the reference element.\n   * By default, when this modifier is disabled, the popper will be placed outside\n   * the reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  inner: {\n    /** @prop {number} order=700 - Index used to define the order of execution */\n    order: 700,\n    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */\n    enabled: false,\n    /** @prop {ModifierFn} */\n    fn: inner,\n  },\n\n  /**\n   * Modifier used to hide the popper when its reference element is outside of the\n   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can\n   * be used to hide with a CSS selector the popper when its reference is\n   * out of boundaries.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   * @memberof modifiers\n   * @inner\n   */\n  hide: {\n    /** @prop {number} order=800 - Index used to define the order of execution */\n    order: 800,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: hide,\n  },\n\n  /**\n   * Computes the style that will be applied to the popper element to gets\n   * properly positioned.\n   *\n   * Note that this modifier will not touch the DOM, it just prepares the styles\n   * so that `applyStyle` modifier can apply it. This separation is useful\n   * in case you need to replace `applyStyle` with a custom implementation.\n   *\n   * This modifier has `850` as `order` value to maintain backward compatibility\n   * with previous versions of Popper.js. Expect the modifiers ordering method\n   * to change in future major versions of the library.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  computeStyle: {\n    /** @prop {number} order=850 - Index used to define the order of execution */\n    order: 850,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: computeStyle,\n    /**\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: true,\n    /**\n     * @prop {string} [x='bottom']\n     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.\n     * Change this if your popper should grow in a direction different from `bottom`\n     */\n    x: 'bottom',\n    /**\n     * @prop {string} [x='left']\n     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.\n     * Change this if your popper should grow in a direction different from `right`\n     */\n    y: 'right',\n  },\n\n  /**\n   * Applies the computed styles to the popper element.\n   *\n   * All the DOM manipulations are limited to this modifier. This is useful in case\n   * you want to integrate Popper.js inside a framework or view library and you\n   * want to delegate all the DOM manipulations to it.\n   *\n   * Note that if you disable this modifier, you must make sure the popper element\n   * has its position set to `absolute` before Popper.js can do its work!\n   *\n   * Just disable this modifier and define your own to achieve the desired effect.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  applyStyle: {\n    /** @prop {number} order=900 - Index used to define the order of execution */\n    order: 900,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: applyStyle,\n    /** @prop {Function} */\n    onLoad: applyStyleOnLoad,\n    /**\n     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: undefined,\n  },\n};\n\n/**\n * The `dataObject` is an object containing all the information used by Popper.js.\n * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.\n * @name dataObject\n * @property {Object} data.instance The Popper.js instance\n * @property {String} data.placement Placement applied to popper\n * @property {String} data.originalPlacement Placement originally defined on init\n * @property {Boolean} data.flipped True if popper has been flipped by flip modifier\n * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper\n * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier\n * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.boundaries Offsets of the popper boundaries\n * @property {Object} data.offsets The measurements of popper, reference and arrow elements\n * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0\n */\n","/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function shift(data) {\n  const placement = data.placement;\n  const basePlacement = placement.split('-')[0];\n  const shiftvariation = placement.split('-')[1];\n\n  // if shift shiftvariation is specified, run the modifier\n  if (shiftvariation) {\n    const { reference, popper } = data.offsets;\n    const isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;\n    const side = isVertical ? 'left' : 'top';\n    const measurement = isVertical ? 'width' : 'height';\n\n    const shiftOffsets = {\n      start: { [side]: reference[side] },\n      end: {\n        [side]: reference[side] + reference[measurement] - popper[measurement],\n      },\n    };\n\n    data.offsets.popper = { ...popper, ...shiftOffsets[shiftvariation] };\n  }\n\n  return data;\n}\n","import getOffsetParent from '../utils/getOffsetParent';\nimport getBoundaries from '../utils/getBoundaries';\nimport getSupportedPropertyName from '../utils/getSupportedPropertyName';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function preventOverflow(data, options) {\n  let boundariesElement =\n    options.boundariesElement || getOffsetParent(data.instance.popper);\n\n  // If offsetParent is the reference element, we really want to\n  // go one step up and use the next offsetParent as reference to\n  // avoid to make this modifier completely useless and look like broken\n  if (data.instance.reference === boundariesElement) {\n    boundariesElement = getOffsetParent(boundariesElement);\n  }\n\n  // NOTE: DOM access here\n  // resets the popper's position so that the document size can be calculated excluding\n  // the size of the popper element itself\n  const transformProp = getSupportedPropertyName('transform');\n  const popperStyles = data.instance.popper.style; // assignment to help minification\n  const { top, left, [transformProp]: transform } = popperStyles;\n  popperStyles.top = '';\n  popperStyles.left = '';\n  popperStyles[transformProp] = '';\n\n  const boundaries = getBoundaries(\n    data.instance.popper,\n    data.instance.reference,\n    options.padding,\n    boundariesElement,\n    data.positionFixed\n  );\n\n  // NOTE: DOM access here\n  // restores the original style properties after the offsets have been computed\n  popperStyles.top = top;\n  popperStyles.left = left;\n  popperStyles[transformProp] = transform;\n\n  options.boundaries = boundaries;\n\n  const order = options.priority;\n  let popper = data.offsets.popper;\n\n  const check = {\n    primary(placement) {\n      let value = popper[placement];\n      if (\n        popper[placement] < boundaries[placement] &&\n        !options.escapeWithReference\n      ) {\n        value = Math.max(popper[placement], boundaries[placement]);\n      }\n      return { [placement]: value };\n    },\n    secondary(placement) {\n      const mainSide = placement === 'right' ? 'left' : 'top';\n      let value = popper[mainSide];\n      if (\n        popper[placement] > boundaries[placement] &&\n        !options.escapeWithReference\n      ) {\n        value = Math.min(\n          popper[mainSide],\n          boundaries[placement] -\n            (placement === 'right' ? popper.width : popper.height)\n        );\n      }\n      return { [mainSide]: value };\n    },\n  };\n\n  order.forEach(placement => {\n    const side =\n      ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';\n    popper = { ...popper, ...check[side](placement) };\n  });\n\n  data.offsets.popper = popper;\n\n  return data;\n}\n","/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function keepTogether(data) {\n  const { popper, reference } = data.offsets;\n  const placement = data.placement.split('-')[0];\n  const floor = Math.floor;\n  const isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n  const side = isVertical ? 'right' : 'bottom';\n  const opSide = isVertical ? 'left' : 'top';\n  const measurement = isVertical ? 'width' : 'height';\n\n  if (popper[side] < floor(reference[opSide])) {\n    data.offsets.popper[opSide] =\n      floor(reference[opSide]) - popper[measurement];\n  }\n  if (popper[opSide] > floor(reference[side])) {\n    data.offsets.popper[opSide] = floor(reference[side]);\n  }\n\n  return data;\n}\n","import getClientRect from '../utils/getClientRect';\nimport getOuterSizes from '../utils/getOuterSizes';\nimport isModifierRequired from '../utils/isModifierRequired';\nimport getStyleComputedProperty from '../utils/getStyleComputedProperty';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function arrow(data, options) {\n  // arrow depends on keepTogether in order to work\n  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {\n    return data;\n  }\n\n  let arrowElement = options.element;\n\n  // if arrowElement is a string, suppose it's a CSS selector\n  if (typeof arrowElement === 'string') {\n    arrowElement = data.instance.popper.querySelector(arrowElement);\n\n    // if arrowElement is not found, don't run the modifier\n    if (!arrowElement) {\n      return data;\n    }\n  } else {\n    // if the arrowElement isn't a query selector we must check that the\n    // provided DOM node is child of its popper node\n    if (!data.instance.popper.contains(arrowElement)) {\n      console.warn(\n        'WARNING: `arrow.element` must be child of its popper element!'\n      );\n      return data;\n    }\n  }\n\n  const placement = data.placement.split('-')[0];\n  const { popper, reference } = data.offsets;\n  const isVertical = ['left', 'right'].indexOf(placement) !== -1;\n\n  const len = isVertical ? 'height' : 'width';\n  const sideCapitalized = isVertical ? 'Top' : 'Left';\n  const side = sideCapitalized.toLowerCase();\n  const altSide = isVertical ? 'left' : 'top';\n  const opSide = isVertical ? 'bottom' : 'right';\n  const arrowElementSize = getOuterSizes(arrowElement)[len];\n\n  //\n  // extends keepTogether behavior making sure the popper and its\n  // reference have enough pixels in conjunction\n  //\n\n  // top/left side\n  if (reference[opSide] - arrowElementSize < popper[side]) {\n    data.offsets.popper[side] -=\n      popper[side] - (reference[opSide] - arrowElementSize);\n  }\n  // bottom/right side\n  if (reference[side] + arrowElementSize > popper[opSide]) {\n    data.offsets.popper[side] +=\n      reference[side] + arrowElementSize - popper[opSide];\n  }\n  data.offsets.popper = getClientRect(data.offsets.popper);\n\n  // compute center of the popper\n  const center = reference[side] + reference[len] / 2 - arrowElementSize / 2;\n\n  // Compute the sideValue using the updated popper offsets\n  // take popper margin in account because we don't have this info available\n  const css = getStyleComputedProperty(data.instance.popper);\n  const popperMarginSide = parseFloat(css[`margin${sideCapitalized}`]);\n  const popperBorderSide = parseFloat(css[`border${sideCapitalized}Width`]);\n  let sideValue =\n    center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;\n\n  // prevent arrowElement from being placed not contiguously to its popper\n  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);\n\n  data.arrowElement = arrowElement;\n  data.offsets.arrow = {\n    [side]: Math.round(sideValue),\n    [altSide]: '', // make sure to unset any eventual altSide value from the DOM node\n  };\n\n  return data;\n}\n","/**\n * Get the opposite placement variation of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement variation\n * @returns {String} flipped placement variation\n */\nexport default function getOppositeVariation(variation) {\n  if (variation === 'end') {\n    return 'start';\n  } else if (variation === 'start') {\n    return 'end';\n  }\n  return variation;\n}\n","import getClientRect from '../utils/getClientRect';\nimport getOppositePlacement from '../utils/getOppositePlacement';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function inner(data) {\n  const placement = data.placement;\n  const basePlacement = placement.split('-')[0];\n  const { popper, reference } = data.offsets;\n  const isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;\n\n  const subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;\n\n  popper[isHoriz ? 'left' : 'top'] =\n    reference[basePlacement] -\n    (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);\n\n  data.placement = getOppositePlacement(placement);\n  data.offsets.popper = getClientRect(popper);\n\n  return data;\n}\n","import isModifierRequired from '../utils/isModifierRequired';\nimport find from '../utils/find';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function hide(data) {\n  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {\n    return data;\n  }\n\n  const refRect = data.offsets.reference;\n  const bound = find(\n    data.instance.modifiers,\n    modifier => modifier.name === 'preventOverflow'\n  ).boundaries;\n\n  if (\n    refRect.bottom < bound.top ||\n    refRect.left > bound.right ||\n    refRect.top > bound.bottom ||\n    refRect.right < bound.left\n  ) {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === true) {\n      return data;\n    }\n\n    data.hide = true;\n    data.attributes['x-out-of-boundaries'] = '';\n  } else {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === false) {\n      return data;\n    }\n\n    data.hide = false;\n    data.attributes['x-out-of-boundaries'] = false;\n  }\n\n  return data;\n}\n","/**\n * @function\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Boolean} shouldRound - If the offsets should be rounded at all\n * @returns {Object} The popper's position offsets rounded\n *\n * The tale of pixel-perfect positioning. It's still not 100% perfect, but as\n * good as it can be within reason.\n * Discussion here: https://github.com/FezVrasta/popper.js/pull/715\n *\n * Low DPI screens cause a popper to be blurry if not using full pixels (Safari\n * as well on High DPI screens).\n *\n * Firefox prefers no rounding for positioning and does not have blurriness on\n * high DPI screens.\n *\n * Only horizontal placement and left/right values need to be considered.\n */\nexport default function getRoundedOffsets(data, shouldRound) {\n  const { popper, reference } = data.offsets;\n  const { round, floor } = Math;\n  const noRound = v => v;\n  \n  const referenceWidth = round(reference.width);\n  const popperWidth = round(popper.width);\n  \n  const isVertical = ['left', 'right'].indexOf(data.placement) !== -1;\n  const isVariation = data.placement.indexOf('-') !== -1;\n  const sameWidthParity = referenceWidth % 2 === popperWidth % 2;\n  const bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;\n\n  const horizontalToInteger = !shouldRound\n    ? noRound\n    : isVertical || isVariation || sameWidthParity\n    ? round\n    : floor;\n  const verticalToInteger = !shouldRound ? noRound : round;\n\n  return {\n    left: horizontalToInteger(\n      bothOddWidth && !isVariation && shouldRound\n        ? popper.left - 1\n        : popper.left\n    ),\n    top: verticalToInteger(popper.top),\n    bottom: verticalToInteger(popper.bottom),\n    right: horizontalToInteger(popper.right),\n  };\n}\n","import setStyles from '../utils/setStyles';\nimport setAttributes from '../utils/setAttributes';\nimport getReferenceOffsets from '../utils/getReferenceOffsets';\nimport computeAutoPlacement from '../utils/computeAutoPlacement';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} data.styles - List of style properties - values to apply to popper element\n * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The same data object\n */\nexport default function applyStyle(data) {\n  // any property present in `data.styles` will be applied to the popper,\n  // in this way we can make the 3rd party modifiers add custom styles to it\n  // Be aware, modifiers could override the properties defined in the previous\n  // lines of this modifier!\n  setStyles(data.instance.popper, data.styles);\n\n  // any property present in `data.attributes` will be applied to the popper,\n  // they will be set as HTML attributes of the element\n  setAttributes(data.instance.popper, data.attributes);\n\n  // if arrowElement is defined and arrowStyles has some properties\n  if (data.arrowElement && Object.keys(data.arrowStyles).length) {\n    setStyles(data.arrowElement, data.arrowStyles);\n  }\n\n  return data;\n}\n\n/**\n * Set the x-placement attribute before everything else because it could be used\n * to add margins to the popper margins needs to be calculated to get the\n * correct popper offsets.\n * @method\n * @memberof Popper.modifiers\n * @param {HTMLElement} reference - The reference element used to position the popper\n * @param {HTMLElement} popper - The HTML element used as popper\n * @param {Object} options - Popper.js options\n */\nexport function applyStyleOnLoad(\n  reference,\n  popper,\n  options,\n  modifierOptions,\n  state\n) {\n  // compute reference element offsets\n  const referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  const placement = computeAutoPlacement(\n    options.placement,\n    referenceOffsets,\n    popper,\n    reference,\n    options.modifiers.flip.boundariesElement,\n    options.modifiers.flip.padding\n  );\n\n  popper.setAttribute('x-placement', placement);\n\n  // Apply `position` to popper before anything else because\n  // without the position applied we can't guarantee correct computations\n  setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });\n\n  return options;\n}\n","/**\n * Set the attributes to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the attributes to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nexport default function setAttributes(element, attributes) {\n  Object.keys(attributes).forEach(function(prop) {\n    const value = attributes[prop];\n    if (value !== false) {\n      element.setAttribute(prop, attributes[prop]);\n    } else {\n      element.removeAttribute(prop);\n    }\n  });\n}\n","import modifiers from '../modifiers/index';\n\n/**\n * Default options provided to Popper.js constructor.<br />\n * These can be overridden using the `options` argument of Popper.js.<br />\n * To override an option, simply pass an object with the same\n * structure of the `options` object, as the 3rd argument. For example:\n * ```\n * new Popper(ref, pop, {\n *   modifiers: {\n *     preventOverflow: { enabled: false }\n *   }\n * })\n * ```\n * @type {Object}\n * @static\n * @memberof Popper\n */\nexport default {\n  /**\n   * Popper's placement.\n   * @prop {Popper.placements} placement='bottom'\n   */\n  placement: 'bottom',\n\n  /**\n   * Set this to true if you want popper to position it self in 'fixed' mode\n   * @prop {Boolean} positionFixed=false\n   */\n  positionFixed: false,\n\n  /**\n   * Whether events (resize, scroll) are initially enabled.\n   * @prop {Boolean} eventsEnabled=true\n   */\n  eventsEnabled: true,\n\n  /**\n   * Set to true if you want to automatically remove the popper when\n   * you call the `destroy` method.\n   * @prop {Boolean} removeOnDestroy=false\n   */\n  removeOnDestroy: false,\n\n  /**\n   * Callback called when the popper is created.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onCreate}\n   */\n  onCreate: () => {},\n\n  /**\n   * Callback called when the popper is updated. This callback is not called\n   * on the initialization/creation of the popper, but only on subsequent\n   * updates.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onUpdate}\n   */\n  onUpdate: () => {},\n\n  /**\n   * List of modifiers used to modify the offsets before they are applied to the popper.\n   * They provide most of the functionalities of Popper.js.\n   * @prop {modifiers}\n   */\n  modifiers,\n};\n\n/**\n * @callback onCreate\n * @param {dataObject} data\n */\n\n/**\n * @callback onUpdate\n * @param {dataObject} data\n */\n","// Utils\nimport debounce from './utils/debounce';\nimport isFunction from './utils/isFunction';\n\n// Methods\nimport update from './methods/update';\nimport destroy from './methods/destroy';\nimport enableEventListeners from './methods/enableEventListeners';\nimport disableEventListeners from './methods/disableEventListeners';\nimport Defaults from './methods/defaults';\nimport placements from './methods/placements';\n\nexport default class Popper {\n  /**\n   * Creates a new Popper.js instance.\n   * @class Popper\n   * @param {Element|referenceObject} reference - The reference element used to position the popper\n   * @param {Element} popper - The HTML / XML element used as the popper\n   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)\n   * @return {Object} instance - The generated Popper.js instance\n   */\n  constructor(reference, popper, options = {}) {\n    // make update() debounced, so that it only runs at most once-per-tick\n    this.update = debounce(this.update.bind(this));\n\n    // with {} we create a new object with the options inside it\n    this.options = { ...Popper.Defaults, ...options };\n\n    // init state\n    this.state = {\n      isDestroyed: false,\n      isCreated: false,\n      scrollParents: [],\n    };\n\n    // get reference and popper elements (allow jQuery wrappers)\n    this.reference = reference && reference.jquery ? reference[0] : reference;\n    this.popper = popper && popper.jquery ? popper[0] : popper;\n\n    // Deep merge modifiers options\n    this.options.modifiers = {};\n    Object.keys({\n      ...Popper.Defaults.modifiers,\n      ...options.modifiers,\n    }).forEach(name => {\n      this.options.modifiers[name] = {\n        // If it's a built-in modifier, use it as base\n        ...(Popper.Defaults.modifiers[name] || {}),\n        // If there are custom options, override and merge with default ones\n        ...(options.modifiers ? options.modifiers[name] : {}),\n      };\n    });\n\n    // Refactoring modifiers' list (Object => Array)\n    this.modifiers = Object.keys(this.options.modifiers)\n      .map(name => ({\n        name,\n        ...this.options.modifiers[name],\n      }))\n      // sort the modifiers by order\n      .sort((a, b) => a.order - b.order);\n\n    // modifiers have the ability to execute arbitrary code when Popper.js get inited\n    // such code is executed in the same order of its modifier\n    // they could add new properties to their options configuration\n    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!\n    this.modifiers.forEach(modifierOptions => {\n      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {\n        modifierOptions.onLoad(\n          this.reference,\n          this.popper,\n          this.options,\n          modifierOptions,\n          this.state\n        );\n      }\n    });\n\n    // fire the first update to position the popper in the right place\n    this.update();\n\n    const eventsEnabled = this.options.eventsEnabled;\n    if (eventsEnabled) {\n      // setup event listeners, they will take care of update the position in specific situations\n      this.enableEventListeners();\n    }\n\n    this.state.eventsEnabled = eventsEnabled;\n  }\n\n  // We can't use class properties because they don't get listed in the\n  // class prototype and break stuff like Sinon stubs\n  update() {\n    return update.call(this);\n  }\n  destroy() {\n    return destroy.call(this);\n  }\n  enableEventListeners() {\n    return enableEventListeners.call(this);\n  }\n  disableEventListeners() {\n    return disableEventListeners.call(this);\n  }\n\n  /**\n   * Schedules an update. It will run on the next UI update available.\n   * @method scheduleUpdate\n   * @memberof Popper\n   */\n  scheduleUpdate = () => requestAnimationFrame(this.update);\n\n  /**\n   * Collection of utilities useful when writing custom modifiers.\n   * Starting from version 1.7, this method is available only if you\n   * include `popper-utils.js` before `popper.js`.\n   *\n   * **DEPRECATION**: This way to access PopperUtils is deprecated\n   * and will be removed in v2! Use the PopperUtils module directly instead.\n   * Due to the high instability of the methods contained in Utils, we can't\n   * guarantee them to follow semver. Use them at your own risk!\n   * @static\n   * @private\n   * @type {Object}\n   * @deprecated since version 1.8\n   * @member Utils\n   * @memberof Popper\n   */\n  static Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;\n\n  static placements = placements;\n\n  static Defaults = Defaults;\n}\n\n/**\n * The `referenceObject` is an object that provides an interface compatible with Popper.js\n * and lets you use it as replacement of a real DOM node.<br />\n * You can use this method to position a popper relatively to a set of coordinates\n * in case you don't have a DOM node to use as reference.\n *\n * ```\n * new Popper(referenceObject, popperNode);\n * ```\n *\n * NB: This feature isn't supported in Internet Explorer 10.\n * @name referenceObject\n * @property {Function} data.getBoundingClientRect\n * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.\n * @property {number} data.clientWidth\n * An ES6 getter that will return the width of the virtual reference element.\n * @property {number} data.clientHeight\n * An ES6 getter that will return the height of the virtual reference element.\n */\n"],"names":["module","exports","equal","a","b","constructor","length","i","keys","Array","isArray","RegExp","source","flags","valueOf","Object","prototype","toString","hasOwnProperty","call","key","isBrowser","window","document","navigator","timeoutDuration","longerTimeoutBrowsers","userAgent","indexOf","debounce","Promise","fn","called","resolve","then","scheduled","isFunction","functionToCheck","getStyleComputedProperty","element","property","nodeType","css","ownerDocument","defaultView","getComputedStyle","getParentNode","nodeName","parentNode","host","getScrollParent","body","overflow","_getStyleComputedProp","overflowX","overflowY","test","getReferenceNode","reference","referenceNode","isIE11","MSInputMethodContext","documentMode","isIE10","isIE","version","getOffsetParent","documentElement","noOffsetParent","offsetParent","nextElementSibling","getRoot","node","findCommonOffsetParent","element1","element2","order","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","start","end","range","createRange","setStart","setEnd","commonAncestorContainer","contains","firstElementChild","isOffsetContainer","element1root","getScroll","upperSide","arguments","undefined","html","scrollingElement","getBordersSize","styles","axis","sideA","sideB","parseFloat","getSize","computedStyle","Math","max","parseInt","getWindowSizes","getClientRect","offsets","left","width","top","height","getBoundingClientRect","rect","scrollTop","scrollLeft","bottom","right","e","result","sizes","clientWidth","clientHeight","horizScrollbar","offsetWidth","vertScrollbar","offsetHeight","getOffsetRectRelativeToArbitraryNode","children","parent","fixedPosition","isHTML","childrenRect","parentRect","scrollParent","borderTopWidth","borderLeftWidth","marginTop","marginLeft","subtract","modifier","includeScroll","isFixed","getFixedPositionOffsetParent","parentElement","el","getBoundaries","popper","padding","boundariesElement","boundaries","excludeScroll","relativeOffset","innerWidth","innerHeight","getViewportOffsetRectRelativeToArtbitraryNode","boundariesNode","_getWindowSizes","isPaddingNumber","computeAutoPlacement","placement","refRect","rects","sortedAreas","map","_ref","sort","area","filteredAreas","filter","_ref2","computedPlacement","variation","split","getReferenceOffsets","state","getOuterSizes","x","marginBottom","y","marginRight","getOppositePlacement","hash","replace","matched","getPopperOffsets","referenceOffsets","popperRect","popperOffsets","isHoriz","mainSide","secondarySide","measurement","secondaryMeasurement","find","arr","check","runModifiers","modifiers","data","ends","slice","prop","value","findIndex","cur","match","obj","forEach","warn","enabled","update","this","isDestroyed","options","positionFixed","flip","originalPlacement","position","isCreated","onUpdate","onCreate","isModifierEnabled","modifierName","some","name","getSupportedPropertyName","prefixes","upperProp","charAt","toUpperCase","prefix","toCheck","style","destroy","removeAttribute","willChange","disableEventListeners","removeOnDestroy","removeChild","getWindow","attachToScrollParents","event","callback","scrollParents","isBody","target","addEventListener","passive","push","setupEventListeners","updateBound","scrollElement","eventsEnabled","enableEventListeners","scheduleUpdate","removeEventListener","isNumeric","n","isNaN","isFinite","setStyles","unit","isFirefox","isModifierRequired","requestingName","requestedName","requesting","isRequired","_requesting","requested","placements","validPlacements","clockwise","counter","index","concat","reverse","BEHAVIORS","parseOffset","offset","basePlacement","useHeight","fragments","frag","trim","divider","search","splitRegex","ops","op","mergeWithPrevious","reduce","str","toValue","index2","shiftvariation","_data$offsets","isVertical","side","shiftOffsets","_extends","instance","transformProp","popperStyles","transform","priority","escapeWithReference","min","floor","opSide","arrowElement","querySelector","len","sideCapitalized","toLowerCase","altSide","arrowElementSize","center","popperMarginSide","popperBorderSide","sideValue","arrow","defineProperty","_data$offsets$arrow","round","flipped","placementOpposite","flipOrder","behavior","FLIP","CLOCKWISE","COUNTERCLOCKWISE","step","refOffsets","overlapsRef","overflowsLeft","overflowsRight","overflowsTop","overflowsBottom","overflowsBoundaries","flippedVariationByRef","flipVariations","flippedVariationByContent","flipVariationsByContent","flippedVariation","getOppositeVariation","subtractLength","bound","hide","attributes","legacyGpuAccelerationOption","gpuAcceleration","offsetParentRect","shouldRound","noRound","v","referenceWidth","popperWidth","isVariation","horizontalToInteger","verticalToInteger","getRoundedOffsets","devicePixelRatio","prefixedProperty","invertTop","invertLeft","arrowStyles","setAttribute","modifierOptions","Defaults","Popper","requestAnimationFrame","_this","bind","jquery","onLoad","Utils","global","PopperUtils"],"sourceRoot":""}